<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java全栈学习路线</title>
    <url>/2021/07/25/Java%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<h2 id="Java全栈学习路线"><a href="#Java全栈学习路线" class="headerlink" title="Java全栈学习路线"></a>Java全栈学习路线</h2><p><strong><font color="orange">一、Java基础</font></strong></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210725220739.png"></p>
<p><font color="orange"><strong>二、JavaWeb</strong></font></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210725220827.png"></p>
<p><strong><font color="orange">三、SSM框架</font></strong></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210725220852.png"></p>
<p><strong><font color="orange">四、Linux运维</font></strong></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210725220921.png"></p>
<p><strong><font color="orange">五、微服务和分布式</font></strong></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210725220933.webp"></p>
<p><strong><font color="orange">六、大数据开发</font></strong></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210725221010.png"></p>
<p><strong><font color="orange">七、持续学习</font></strong></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210725221059.png"></p>
]]></content>
      <tags>
        <tag>java学习路线</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora+Picgo+Gitee云图床设置</title>
    <url>/2019/01/20/Typora-Picgo-Gitee%E4%BA%91%E5%9B%BE%E5%BA%8A%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="一、Typora修改图片默认的存储位置"><a href="#一、Typora修改图片默认的存储位置" class="headerlink" title="一、Typora修改图片默认的存储位置"></a>一、Typora修改图片默认的存储位置</h1><h3 id="1-使用相对路径，图片分布在离线笔记内的各个文件夹（assets）下"><a href="#1-使用相对路径，图片分布在离线笔记内的各个文件夹（assets）下" class="headerlink" title="1. 使用相对路径，图片分布在离线笔记内的各个文件夹（assets）下"></a>1. 使用相对路径，图片分布在离线笔记内的各个文件夹（assets）下</h3><p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140211.png"></p>
<p> 我的默认位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\28431\AppData\Roaming\Typora\typora-user-images</span><br></pre></td></tr></table></figure>

<p>  我的修改的位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\go\typora\typorainstall\Typora修改图片默认的存储位置.assets</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140220.png"></p>
<p><strong>勾选至少有框1 框3。</strong></p>
<blockquote>
<p>至此，设置完成。 但是在新建一个文件的时候，<em><strong>一定要将文件先保存（选择自己希望的路径），然后再开始编辑内容</strong></em>，这样当将截图粘贴的时候，就可以自动在同一级目录下生成存放图片的文件夹。 </p>
</blockquote>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140226.png"></p>
<p><em><strong>在对应的文件夹中也已经有啦！</strong></em></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140243.png"></p>
<p>如果没有保存，习惯性先编辑好文字 粘贴好图片 然后再保存，那么在粘贴图片的时候，会发现图片路径有问题。</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140249.png"></p>
<p>先保存文件再编辑通俗点就是，新建文件后紧接着保存文件。</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140330.png"></p>
<h3 id="2-使用相对路径，图片集中保存到统一的文件夹内"><a href="#2-使用相对路径，图片集中保存到统一的文件夹内" class="headerlink" title="2. 使用相对路径，图片集中保存到统一的文件夹内"></a>2. 使用相对路径，图片集中保存到统一的文件夹内</h3><p>参考：<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYW5keTk0NjgvcC8xMjk4MjIwMC5odG1s">https://www.cnblogs.com/andy9468/p/12982200.html<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="二、Typora-使用小技巧（主题、图床等等）"><a href="#二、Typora-使用小技巧（主题、图床等等）" class="headerlink" title="二、Typora 使用小技巧（主题、图床等等）"></a>二、Typora 使用小技巧（主题、图床等等）</h1><p>本篇从一些使用体验的角度，分享一些让 Typora 更好用，用的更加舒适的小 Tips。</p>
<h3 id="Tips-1：主题"><a href="#Tips-1：主题" class="headerlink" title="Tips 1：主题"></a><strong>Tips 1：主题</strong></h3><p>Typora 默认使用的是 GitHub 主题，你可以点击菜单栏/主题 进行切换。</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140349.jpg"></p>
<p>如果系统默认的主题无法满足需求，打开**主题商店[1]**，里面有更多的选择。</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140358.jpg"></p>
<p>安装主题也非常简单，打开 Typora 设置选项，选择 外观/主题/打开主题文件夹，然后将下载好的主题解压拖进去。注意是将压缩包里的文件复制进去，然后重启生效！</p>
<p>主题支持二次修改，可以打开主题文件夹，直接修改相关 css 代码，调整字体、边距等等。选择 菜单/帮助/ Enable Debugging，右键检查元素，然后就可以像调试 Web 程序一样，修改主题样式。</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140410.jpg"></p>
<h3 id="Tips-2：图床配置"><a href="#Tips-2：图床配置" class="headerlink" title="Tips 2：图床配置"></a><strong>Tips 2：图床配置</strong></h3><p>Typora 配合图床使用，不再需要将图片一张一张进行上传，直接复制或者拖拽至 Typora 的文字编辑器，即可自动上传， 效率 Up！</p>
<p>打开 设置/图像/上传图片，按照图片中的选项进行选择，上传服务推荐 **PicGo[2]**，图床的配置参考 <strong>PicGo 官方文档[3]</strong></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140417.jpg"></p>
<h3 id="Tips-3：显示模式"><a href="#Tips-3：显示模式" class="headerlink" title="Tips 3：显示模式"></a><strong>Tips 3：显示模式</strong></h3><h3 id="专注模式"><a href="#专注模式" class="headerlink" title="专注模式"></a><strong>专注模式</strong></h3><p>快捷键 <code>F8</code> 打开专注模式，编辑器会高亮显示当前正在编辑的段落，让你更加专注于当前内容，不受视觉干扰。</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140423.jpg"></p>
<h3 id="打字机模式"><a href="#打字机模式" class="headerlink" title="打字机模式"></a><strong>打字机模式</strong></h3><p>快捷键 <code>F9</code> 打开打字机模式，当前正在编辑的段落会居中显示。</p>
<h3 id="源码模式"><a href="#源码模式" class="headerlink" title="源码模式"></a><strong>源码模式</strong></h3><p>快键键 <code>ctrl+/</code> 打开源码模式，显示纯粹的 Markdown 文本编辑。</p>
<h3 id="Tips-4：数学公式"><a href="#Tips-4：数学公式" class="headerlink" title="Tips 4：数学公式"></a><strong>Tips 4：数学公式</strong></h3><p>数学的公式块是使用 <em>LaTeX</em> 语言实现，输入<code>$$</code>，然后按下<code>Enter</code>键就会弹出一个支持TeX/LaTeX语法的输入框。</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140435.jpg"></p>
<h3 id="Tips-5：导出选项"><a href="#Tips-5：导出选项" class="headerlink" title="Tips 5：导出选项"></a><strong>Tips 5：导出选项</strong></h3><p>选择菜单/文件/导出，选择不同的导出形式，选择图像会导出一张文档的长截图，可作为分享图片。</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140443.jpg"></p>
<h3 id="Tips6：Emoji-小表情"><a href="#Tips6：Emoji-小表情" class="headerlink" title="Tips6：Emoji 小表情"></a><strong>Tips6：Emoji 小表情</strong></h3><p>Markdown <code>:&lt;emoji&gt;:</code> 语法支持使用 Emoji 小表情，Typora 提供一个很好的提示功能，输入<code>:表情名称</code> 可以触发提示 。</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140456.jpg"></p>
<p>更多的 Tips 正在探索的路上…</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h3><p>[1]</p>
<p>主题商店: <em><span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHA6Ly90aGVtZS50eXBvcmEuaW8v">http://theme.typora.io/<i class="fa fa-external-link-alt"></i></span></em></p>
<p>[2]</p>
<p>PicGo: <em><span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vbW9sdW5lcmZpbm4uY29tL1BpY0dvLw==">https://molunerfinn.com/PicGo/<i class="fa fa-external-link-alt"></i></span></em></p>
<p>[3]</p>
<p>PicGo 官方文档: <span class="exturl" data-url="aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vcGljZ28uZ2l0aHViLmlvL1BpY0dvLURvYy8=">https://picgo.github.io/PicGo-Doc/<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="三、typora设置云图床"><a href="#三、typora设置云图床" class="headerlink" title="三、typora设置云图床"></a>三、typora设置云图床</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h3><p>​    相信我们都遇到过，使用Typora做笔记是一件非常令人舒服的事，然而，它却有一个非常难受的地方，那就是我们在做完笔记想要将其上传到自己的博客时，复制粘贴的图片无法显示。因为Typora复制的图片是在本地进行了保存，所以，我们只需要让其将图片自动上传到云上，所有的图片链接使用网页链接即可解决问题。</p>
<h3 id="安装所需"><a href="#安装所需" class="headerlink" title="安装所需"></a>安装所需</h3><p><strong>gitee+typora+PicGo</strong></p>
<h4 id="0x01-准备安装"><a href="#0x01-准备安装" class="headerlink" title="0x01. 准备安装"></a>0x01. 准备安装</h4><p>PicGo：<span class="exturl" data-url="aHR0cHM6Ly9tb2x1bmVyZmlubi5jb20vUGljR28v">https://molunerfinn.com/PicGo/<i class="fa fa-external-link-alt"></i></span></p>
<p>Typora：<span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwb3JhLmlvLyN3aW5kb3dz">https://www.typora.io/#windows<i class="fa fa-external-link-alt"></i></span></p>
<p>码云账号：<span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20v">https://gitee.com/<i class="fa fa-external-link-alt"></i></span></p>
<h4 id="0x02-配置码云"><a href="#0x02-配置码云" class="headerlink" title="0x02. 配置码云"></a>0x02. 配置码云</h4><ol>
<li>没有的先去注册一个，然后进入主界面，点击 + 创建新仓库</li>
</ol>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140509.png"></p>
<ol>
<li>新建仓库–&gt; <code>创建</code></li>
</ol>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140520.png"></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140540.png"></p>
<p>仓库创建完成。</p>
<ol>
<li><code>设置</code>–&gt;<code>私人令牌</code>（很重要，妥善保管）</li>
</ol>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140558.png"></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140604.png"></p>
<p>注意：点击提交之后生成的字符需要记录下来，口令只会生成一次。</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140610.png"></p>
<p>码云设置成功。</p>
<h4 id="0x03-配置PicGo"><a href="#0x03-配置PicGo" class="headerlink" title="0x03. 配置PicGo"></a>0x03. 配置PicGo</h4><ol>
<li>下载PicGo</li>
</ol>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dvL3JlbGVhc2Vz">下载链接<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140617.png"></p>
<ol>
<li>安装插件</li>
</ol>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140624.png"></p>
<ol>
<li>设置图床</li>
</ol>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140631.png"></p>
<p>记得将gitee设置为<code>默认图床</code>。</p>
<ol>
<li>检测图床配置</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">点击插件设置`---&gt;`点击插件小齿轮`---&gt;`配置uploader-gitee</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140636.png"></p>
<p>检测是否和你配置的一致。</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140641.png"></p>
<ol>
<li>测试图片上传是否成功</li>
</ol>
<p><code>点击上传区</code>—&gt;<code>上传图片</code>—&gt;<code>点击相册查看</code>—<code>&gt;存在则成功</code>。</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140646.png"></p>
<p>点击相册进行查看。</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140652.png"></p>
<p>可以看到，博主这篇文章就是在Typora中编写的，所有的截屏全部上传到了gitee进行保存。</p>
<h4 id="0x04-配置Typora"><a href="#0x04-配置Typora" class="headerlink" title="0x04. 配置Typora"></a>0x04. 配置Typora</h4><p>打开<strong>Typora</strong>的<code>偏好设置</code>，点击<code>图像</code>，设置如下：</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140658.png"></p>
<p>如果你的Typora偏好设置中没有<code>上传服务设定</code>，先去将Typora升级到最新版本。</p>
<h4 id="0x05-问题总结"><a href="#0x05-问题总结" class="headerlink" title="0x05. 问题总结"></a>0x05. 问题总结</h4><p>笔者在进行设置完之后，进行测试过，在上图的图像设置中，我们若是在Typora中设置插入图片时···，选择<code>上传图片</code>，则真正上传时，会显示失败：</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140704.png"></p>
<p><img src="https://gitee.com/ruoli-s/cloudimage/raw/master/img/image-20201230153307211.png" alt="image-20201230153307211"></p>
<p>但是，虽然报错上传失败，我们的图片还是上传成功了的。可以正常使用。</p>
<p>解决办法就是，在选择时，点击<code>无特殊操作</code>，亲测不报错，图片也时正常上传了的。</p>
<p>如图，我的图片链接显示如下：</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140716.png"></p>
<h4 id="0x06-其他问题"><a href="#0x06-其他问题" class="headerlink" title="0x06. 其他问题"></a>0x06. 其他问题</h4><h3 id="问题一：验证图片上传失败"><a href="#问题一：验证图片上传失败" class="headerlink" title="问题一：验证图片上传失败"></a>问题一：验证图片上传失败</h3><ul>
<li><p><font color="red">问题：</font><br>在Typora设置好PicGo上传服务后，无法验证图片上传选项。（PicGo没有问题）</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140819.jpeg"></p>
<p>出现验证失败。</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718140855.jpeg"></p>
</li>
<li><p>分析：<br>可能是PicGo的服务器默认端口与Typora不一致（注：程序运行结果是：<strong>Failed to fetch</strong>）或图床上已经有验证过的默认图片（注：程序运行结果是：**{“success”,false}**）。</p>
</li>
<li><p><font color="cornflowerblue">解决：</font></p>
</li>
</ul>
<ol>
<li><p>查看”设置PicGo-Server”窗口的监听端口是否一致，如果不一致则修改。</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718141040.jpeg"></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718141121.jpeg"></p>
</li>
<li><p>检查图床上是否已经有下面两个文件，如有删除后再验证就行了。</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718141105.jpeg"></p>
<p>成功验证：</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718141143.jpeg"></p>
</li>
<li><p><font color="red">PicGo+typora上传图片出现404 - {“message“:“Not Found Project“}</font></p>
<p><code>Typora</code>：它是一款轻便简洁的Markdown编辑器，支持即时渲染技术，即所写立刻所见，少了排版的时间，专注于文章内容的编辑。<br><code>PicGo</code>：它是一个用于快速上传图片并获取图片 URL 链接的工具，支持多种图库，但是它的功能远远不止于此。<br><code>Gitee</code>：目前中国最大的代码托管的工具，实际上，除了代码，它还支持图片存储。<br><code>Snipaste</code>：如果你平时都在用QQ截图，我只能告诉你，你落伍了，Snipaste才是你最好的选择，用它截取的图片不仅质量高，同时，文件大小远远小于QQ截图，只有高质量低文件大小的图片，才能保证你在各大平台上传文章的时候，保证图片不会因为过大而导致的转存失败。<br><font color="cornflowerblue">通过以上的了解总结出：</font></p>
<p>使用typora来写笔记，简单优雅。<br>使用Gitee创建仓库作为图床便于存储图片。<br>使用PicGo图床工具便于将图片上传到图床上。<br>使用以上工具实现一次编写，跨博客网站发布，再也不用担心图片的存放问题以及在上传过程中出现的图片转存失败的问题，所有的文章最终只需要保存一个.md文件就可以了。</p>
<h4 id="遇到错误"><a href="#遇到错误" class="headerlink" title="遇到错误"></a><font color="red">遇到错误</font></h4><p>上面文章详细阐述了如何使用各个工具，但是在我实践的过程中出现了一个错误。typora的偏好设置中上传服务设定好之后，在验证图片上传选项时出现错误如下。</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718141153.png"></p>
<p>查看PicGo的错误日志：</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718141203.png"></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718141210.png"></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718141217.png"></p>
<p><font color="cornflowerblue">解决</font><br>404没有发现项目，显然是没能连接到Gitee仓库。查阅很多篇文章都是说要将PicGo上gitee图床的repo填写上Gitee的仓库名称。这里需要着重注意仓库名称!</p>
</li>
</ol>
<p><strong>错误的gitee设置</strong></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718141224.png"></p>
<p><strong>正确的设置</strong></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718143114.png"><br>打开typora的偏好设置中的图像，点击 “验证图片上传选项” ，成功就会显示获取成功<br><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718141251.png"></p>
<h3 id="问题二：无法粘贴图片到Typora文档"><a href="#问题二：无法粘贴图片到Typora文档" class="headerlink" title="问题二：无法粘贴图片到Typora文档"></a>问题二：无法粘贴图片到Typora文档</h3><ul>
<li><p><font color="red">问题：</font><br>当图床正确配置后，在粘贴图片到Typora文档中时出现“Error”弹窗错误：</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718141347.jpeg"></p>
</li>
<li><p>分析：<br>这是因为当前用户对“C:\Program Files\Typora”文件夹没有“创建文件夹”操作权限造成。</p>
</li>
<li><p><font color="cornflowerblue">解决：</font></p>
<p>给当前用户配置对文件夹Typora足够权限就可以了。在文件夹Typora属性的“</p>
<p>安全</p>
<p>”选项卡，单击“</p>
<p>编辑</p>
<p>”按钮，打开“</p>
<p>Typora权限</p>
<p>”窗口。</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718141606.jpeg"></p>
<p>添加用户并设置其权限即可。</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718141631.jpeg"></p>
</li>
</ul>
<h3 id="问题三：粘贴图片时“image-load-failed”错误"><a href="#问题三：粘贴图片时“image-load-failed”错误" class="headerlink" title="问题三：粘贴图片时“image load failed”错误"></a>问题三：粘贴图片时“image load failed”错误</h3><ul>
<li><font color="red">问题：</font><br>在文档中粘贴图片时出现“<strong>image load failed</strong>”错误，如下图：</li>
</ul>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718141644.jpeg" alt="QQ浏览器截图20210718141446"></p>
<ul>
<li><p>分析：<br>这里问题有可能是图片在粘贴后，程序需要先在upload文件夹中创建和保存它，但未成功。经分析可能是路径出了问题。</p>
</li>
<li><p><font color="cornflowerblue">解决：</font></p>
<p>打开Typora的“</p>
<p>编好设置</p>
<p>”，在图像配置中“</p>
<p>插入图片时…</p>
<p>”选项里，勾选“</p>
<p>优先使用相对路径</p>
<p>”即可。</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718141743.png"></p>
</li>
</ul>
<table>
<thead>
<tr>
<th>More Actions插件镜像地址</th>
<th><span class="exturl" data-url="aHR0cHM6Ly9yZWdpc3RyeS5ucG0udGFvYmFvLm9yZy8=">https://registry.npm.taobao.org/<i class="fa fa-external-link-alt"></i></span></th>
</tr>
</thead>
<tbody><tr>
<td>上传代理</td>
<td><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMToxMDgwLw==">http://127.0.0.1:1080<i class="fa fa-external-link-alt"></i></span></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="四、typora字体设置颜色的解决方案"><a href="#四、typora字体设置颜色的解决方案" class="headerlink" title="四、typora字体设置颜色的解决方案"></a>四、typora字体设置颜色的解决方案</h1><p>typora没有直接设置字体颜色的功能，不能像word一样，选中字体直接设置想要的颜色。</p>
<p>下面第一种方法需安装软件AutoHotKey，操作还算简单；后两种方法都是偏技术的，对于非技术的小白可能有点困难。</p>
<p>方案一：安装软件AutoHotKey（较简单）<br>AutoHotKey是一款著名的windows系统快捷键设置的软件，轻便小巧。</p>
<p>官方下载: <span class="exturl" data-url="aHR0cHM6Ly9hdXRvaG90a2V5LmNvbS9kb3dubG9hZC9haGstaW5zdGFsbC5leGU=">https://autohotkey.com/download/ahk-install.exe<i class="fa fa-external-link-alt"></i></span></p>
<p> （1）<font color="red">先安装AutoHotKey</font></p>
<p>（2）<font color="orange">打开记事本，把如下内容复制粘贴进去</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; Typora</span><br><span class="line">; 快捷增加字体颜色</span><br><span class="line">; SendInput &#123;Text&#125; 解决中文输入法问题</span><br><span class="line"> </span><br><span class="line">#IfWinActive ahk_exe Typora.exe</span><br><span class="line">&#123;</span><br><span class="line">    ; Ctrl+Alt+O 橙色</span><br><span class="line">    ^!o::addFontColor(&quot;orange&quot;)</span><br><span class="line"> </span><br><span class="line">    ; Ctrl+Alt+R 红色</span><br><span class="line">    ^!r::addFontColor(&quot;red&quot;)</span><br><span class="line"> </span><br><span class="line">    ; Ctrl+Alt+B 浅蓝色</span><br><span class="line">    ^!b::addFontColor(&quot;cornflowerblue&quot;)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">; 快捷增加字体颜色</span><br><span class="line">addFontColor(color)&#123;</span><br><span class="line">    clipboard := &quot;&quot; ; 清空剪切板</span><br><span class="line">    Send &#123;ctrl down&#125;c&#123;ctrl up&#125; ; 复制</span><br><span class="line">    SendInput &#123;TEXT&#125;&lt;font color=&#x27;%color%&#x27;&gt;</span><br><span class="line">    SendInput &#123;ctrl down&#125;v&#123;ctrl up&#125; ; 粘贴</span><br><span class="line">    If(clipboard = &quot;&quot;)&#123;</span><br><span class="line">        SendInput &#123;TEXT&#125;&lt;/font&gt; ; Typora 在这不会自动补充</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        SendInput &#123;TEXT&#125;&lt;/ ; Typora中自动补全标签</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>（3）将文件保存为ahk后缀的文件，如TyporaHotKey.ahk</p>
<p>(4)双击运行</p>
<p>（5）在Typora软件里就可以使用快捷键：</p>
<p>如按Ctrl+Alt+O添加橙色，Ctrl+Alt+R 红色，按Ctrl+\取消样式！</p>
<p>也可以右键 MyHotkeyScript.ahk 脚本文件，点击Compile Script编译脚本成exe程序，就可以不用下载Autohotkey在其他电脑上运行了。</p>
<p>上面脚本只写了橙色、红色、浅蓝三种颜色，你可以按需照例增加其他颜色或快捷方式！</p>
<p>方案二：改html代码（懂前端技术超简单）<br>视图——开发者工具（Shift+F12），打开html代码调试模式</p>
<p> 按快捷键Shift+F12（可能还需要同时按住Fn）</p>
<p><span style="color:文字颜色;background:背景颜色;font-size:文字大小;font-family:字体;">你要改色的文字</span><br>按照这个模板，改字体的style属性即可。</p>
<p>示例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">style=<span class="string">&quot;color:red&quot;</span></span><br><span class="line"></span><br><span class="line">style=<span class="string">&quot;color:maroon&quot;</span></span><br><span class="line"></span><br><span class="line">style=<span class="string">&quot;color:fuchsia&quot;</span></span><br><span class="line"></span><br><span class="line">style=<span class="string">&quot;color:brown&quot;</span></span><br><span class="line"></span><br><span class="line">style=<span class="string">&quot;color:blue&quot;</span></span><br><span class="line"></span><br><span class="line">style=<span class="string">&quot;color:aqua&quot;</span></span><br><span class="line"></span><br><span class="line">style=<span class="string">&quot;color:green&quot;</span></span><br><span class="line"></span><br><span class="line">style=<span class="string">&quot;color:orange&quot;</span></span><br><span class="line"></span><br><span class="line">style=<span class="string">&quot;color:purple&quot;</span></span><br><span class="line"></span><br><span class="line">style=<span class="string">&quot;color:white;background:black;&quot;</span></span><br><span class="line"></span><br><span class="line">style=<span class="string">&quot;background:yellow&quot;</span></span><br><span class="line"></span><br><span class="line">style=<span class="string">&quot;background:red&quot;</span></span><br><span class="line"></span><br><span class="line">style=<span class="string">&quot;background:orange&quot;</span></span><br><span class="line"></span><br><span class="line">style=<span class="string">&quot;color:white;background:green&quot;</span></span><br><span class="line"></span><br><span class="line">style=<span class="string">&quot;color:white;background:blue&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 方案三：使用内联公式（复杂）<br>1.开启使用内联公式</p>
<p>文件——偏好设置（Ctrl+逗号）——Markdown——勾选“内联公式”——重启Typora</p>
<p>2.输入公式代码设置颜色</p>
<p>输入$，按Esc键会自动在后面加上一个$，然后在这两个$之间输入公式。</p>
<p>如：</p>
<p>直接在typora里输入：</p>
<p>$\textcolor{Magenta}{洋红色} $:设置颜色为$\textcolor{RedOrange}{橙红色} $，设置字体颜色为$\textcolor{Blue}{蓝色} $。数学公式里各元素也能分别设置颜色：<br>$ \textcolor{red}{\int_a^b}\textcolor{blue}{f(x)}\textcolor{green}{dx}\textcolor{brown}{=c}$<br>文本颜色设置公式：</p>
<p>$\textcolor{red}{这里输入你要改变颜色的文字} $</p>
<p>颜色公式代码大全：<br>$\textcolor{GreenYellow}{GreenYellow} $<br>$\textcolor{Yellow}{Yellow}$<br>$\textcolor{Goldenrod}{Goldenrod} $<br>$\textcolor{Dandelion}{Dandelion}$<br>$\textcolor{Apricot}{Apricot} $<br>$\textcolor{Peach}{Peach}$<br>$\textcolor{Melon}{Melon} $<br>$\textcolor{YellowOrange}{YellowOrange}$<br>$\textcolor{Orange}{Orange} $<br>$\textcolor{BurntOrange}{BurntOrange}$<br>$\textcolor{Bittersweet}{Bittersweet}$<br>$\textcolor{RedOrange}{RedOrange} $<br>$\textcolor{Mahogany}{Mahogany}$<br>$\textcolor{Maroon}{Maroon} $<br>$\textcolor{BrickRed}{BrickRed}$<br>$\textcolor{Red}{Red} $<br>$\textcolor{OrangeRed}{OrangeRed}$<br>$\textcolor{RubineRed}{RubineRed}$<br>$\textcolor{WildStrawberry}{WildStrawberry}$<br>$\textcolor{Salmon}{Salmon}$<br>$\textcolor{CarnationPink}{CarnationPink}$<br>$\textcolor{Magenta}{Magenta} $<br>$\textcolor{VioletRed}{VioletRed}$<br>$\textcolor{Rhodamine}{Rhodamine} $<br>$\textcolor{Mulberry}{Mulberry}$<br>$\textcolor{RedViolet}{RedViolet} $<br>$\textcolor{Fuchsia}{Fuchsia}$<br>$\textcolor{Lavender}{Lavender} $<br>$\textcolor{Thistle}{Thistle}$<br>$\textcolor{Orchid}{Orchid} $<br>$\textcolor{DarkOrchid}{DarkOrchid}$<br>$\textcolor{Purple}{Purple} $<br>$\textcolor{Plum}{Plum}$<br>$\textcolor{Violet}{Violet} $<br>$\textcolor{RoyalPurple}{RoyalPurple}$<br>$\textcolor{BlueViolet}{BlueViolet}$<br>$\textcolor{Periwinkle}{Periwinkle}$<br>$\textcolor{CadetBlue}{CadetBlue}$<br>$\textcolor{CornflowerBlue}{CornflowerBlue}$<br>$\textcolor{MidnightBlue}{MidnightBlue}$<br>$\textcolor{NavyBlue}{NavyBlue} $<br>$\textcolor{RoyalBlue}{RoyalBlue}$<br>$\textcolor{Blue}{Blue} $<br>$\textcolor{Cerulean}{Cerulean}$<br>$\textcolor{Cyan}{Cyan} $<br>$\textcolor{ProcessBlue}{ProcessBlue}$<br>$\textcolor{SkyBlue}{SkyBlue} $<br>$\textcolor{Turquoise}{Turquoise}$<br>$\textcolor{TealBlue}{TealBlue} $<br>$\textcolor{Aquamarine}{Aquamarine}$<br>$\textcolor{BlueGreen}{BlueGreen} $<br>$\textcolor{Emerald}{Emerald}$<br>$\textcolor{JungleGreen}{JungleGreen}$<br>$\textcolor{SeaGreen}{SeaGreen} $<br>$\textcolor{Green}{Green}$<br>$\textcolor{ForestGreen}{ForestGreen}$<br>$\textcolor{PineGreen}{PineGreen} $<br>$\textcolor{LimeGreen}{LimeGreen}$<br>$\textcolor{YellowGreen}{YellowGreen}$<br>$\textcolor{SpringGreen}{SpringGreen}$<br>$\textcolor{OliveGreen}{OliveGreen}$<br>$\textcolor{RawSienna}{RawSienna} $<br>$\textcolor{Sepia}{Sepia}$<br>$\textcolor{Brown}{Brown} $<br>$\textcolor{Tan}{Tan}$<br>$\textcolor{Gray}{Gray} $<br>$\textcolor{Black}{Black}$</p>
]]></content>
      <tags>
        <tag>typora,picgo,gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose安装各种容器</title>
    <url>/2019/01/12/docker-compose%E5%AE%89%E8%A3%85%E5%90%84%E7%A7%8D%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h2 id="一、安装docker"><a href="#一、安装docker" class="headerlink" title="一、安装docker"></a>一、安装docker</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwvY2VudG9zLw==">https://docs.docker.com/engine/install/centos/<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="1-1、卸载系统之前的docker"><a href="#1-1、卸载系统之前的docker" class="headerlink" title="1.1、卸载系统之前的docker"></a>1.1、卸载系统之前的docker</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<h3 id="1-2、先安装一些必须依赖的包"><a href="#1-2、先安装一些必须依赖的包" class="headerlink" title="1.2、先安装一些必须依赖的包"></a>1.2、先安装一些必须依赖的包</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure>

<h3 id="1-3、添加docker下载仓库"><a href="#1-3、添加docker下载仓库" class="headerlink" title="1.3、添加docker下载仓库"></a>1.3、添加docker下载仓库</h3><p>配置镜像，即告诉虚拟机docker应该从哪个地址安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<h3 id="1-4、安装docker的客户端和它的容器"><a href="#1-4、安装docker的客户端和它的容器" class="headerlink" title="1.4、安装docker的客户端和它的容器"></a>1.4、安装docker的客户端和它的容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<h3 id="1-5、启动docker"><a href="#1-5、启动docker" class="headerlink" title="1.5、启动docker"></a>1.5、启动docker</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<h3 id="1-6、设置开机自启动"><a href="#1-6、设置开机自启动" class="headerlink" title="1.6、设置开机自启动"></a>1.6、设置开机自启动</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>

<h3 id="1-7、查看docker版本"><a href="#1-7、查看docker版本" class="headerlink" title="1.7、查看docker版本"></a>1.7、查看docker版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#验证</span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure>

<h3 id="1-8、查看docker中安装了哪些镜像"><a href="#1-8、查看docker中安装了哪些镜像" class="headerlink" title="1.8、查看docker中安装了哪些镜像"></a>1.8、查看docker中安装了哪些镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<h3 id="1-9、配置阿里云镜像加速"><a href="#1-9、配置阿里云镜像加速" class="headerlink" title="1.9、配置阿里云镜像加速"></a>1.9、配置阿里云镜像加速</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://hnlqq1f3.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<h4 id="1-9-1、查看阿里云镜像加速地址"><a href="#1-9-1、查看阿里云镜像加速地址" class="headerlink" title="1.9.1、查看阿里云镜像加速地址"></a>1.9.1、查看阿里云镜像加速地址</h4><p>1、</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721012848.png"></p>
<p>2、</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721012900.png"></p>
<p>3、</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013337.png"></p>
<p>4、</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013345.png"></p>
<h4 id="1-9-2、我的阿里云镜像加速地址"><a href="#1-9-2、我的阿里云镜像加速地址" class="headerlink" title="1.9.2、我的阿里云镜像加速地址"></a>1.9.2、我的阿里云镜像加速地址</h4><p><span class="exturl" data-url="aHR0cHM6Ly9jci5jb25zb2xlLmFsaXl1bi5jb20vY24taGFuZ3pob3UvaW5zdGFuY2VzL21pcnJvcnM=">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="二、安装docker-compose"><a href="#二、安装docker-compose" class="headerlink" title="二、安装docker-compose"></a>二、安装docker-compose</h2><p>查看github上的docker-compose发行版本的地址：<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9jb21wb3NlL3RhZ3M=">https://github.com/docker/compose/tags<i class="fa fa-external-link-alt"></i></span></p>
<p>compose官网安装文档：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZS9pbnN0YWxsLyNpbnN0YWxsLWNvbXBvc2U=">https://docs.docker.com/compose/install/#install-compose<i class="fa fa-external-link-alt"></i></span></p>
<p><strong>安装的命令如下：</strong></p>
<h3 id="2-1、安装docker-compose（国内高速镜像）"><a href="#2-1、安装docker-compose（国内高速镜像）" class="headerlink" title="2.1、安装docker-compose（国内高速镜像）"></a>2.1、安装docker-compose（国内高速镜像）</h3><p>以编译好的二进制包方式安装在Linux系统中</p>
<p>gihub上下载docker-compose太慢了，下载不动，只能换成国内镜像（daocloud.io）来下载。</p>
<p><strong>下载</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>设置文件具备执行权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p><strong>查看是否安装成功</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210720214642.png"></p>
<h3 id="2-2、docker-compose卸载"><a href="#2-2、docker-compose卸载" class="headerlink" title="2.2、docker-compose卸载"></a>2.2、docker-compose卸载</h3><p><font color="red">如果安装出错，要卸载docker-compose，可执行这个命令</font></p>
<p><font color="orange">二进制包方式安装的，删除二进制文件即可</font></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">rm /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h2 id="三、docker-compose安装容器"><a href="#三、docker-compose安装容器" class="headerlink" title="三、docker-compose安装容器"></a>三、docker-compose安装容器</h2><h3 id="3-1、创建文件"><a href="#3-1、创建文件" class="headerlink" title="3.1、创建文件"></a>3.1、创建文件</h3><p>1、在root目录下面建立docker-compose-service文件夹</p>
<p>docker-compose-service文件是我以后存放所有安装的容器地址</p>
<p><img src="https://xbstudy.stdcdn.com/2021/07/3dfe08b71014f2c5eeab588900f8c2ed.png"></p>
<h3 id="3-2、新建一个docker-compose-yml文件"><a href="#3-2、新建一个docker-compose-yml文件" class="headerlink" title="3.2、新建一个docker-compose.yml文件"></a>3.2、新建一个docker-compose.yml文件</h3><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p><font color="red">注意1：docker-compose.yml文件的格式要求很严格，不能出现tab占位符，如果有得改为2个空格代替，否则会报错</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">mkdir docker-compose-service</span><br><span class="line">cd docker-compose-service		#切换到docker-compose-service文件夹下</span><br><span class="line"></span><br><span class="line">vi docker-compose<span class="selector-class">.yml</span>				#编辑docker-compose<span class="selector-class">.yml</span>文件</span><br></pre></td></tr></table></figure>

<p><font color="red">注意2：每次执行docker-compose up -d命令或者其他docker-compose up 命令前必须先切换到docker-compose-service文件夹下，即先执行</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">cd docker-compose-service	</span><br></pre></td></tr></table></figure>

<p><font color="red">否则会报下面的错</font></p>
<p><img src="https://xbstudy.stdcdn.com/2021/07/1bb8aaf7f64991c1646b529015d623a7.png"></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210719172119.png"></p>
<h3 id="3-3、添加内容"><a href="#3-3、添加内容" class="headerlink" title="3.3、添加内容"></a>3.3、添加内容</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&quot;3&quot;</span></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  mysql:</span><br><span class="line">    image: mysql:<span class="number">5.7</span></span><br><span class="line">    container_name: mysql</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;3307:3306&quot;</span></span><br><span class="line">    command:</span><br><span class="line">      --<span class="keyword">default</span>-authentication-plugin=mysql_native_password</span><br><span class="line">      --character-set-server=utf8mb4</span><br><span class="line">      --collation-server=utf8mb4_general_ci</span><br><span class="line">      --explicit_defaults_for_timestamp=<span class="keyword">true</span></span><br><span class="line">      --lower_case_table_names=<span class="number">1</span> </span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: <span class="string">&quot;root&quot;</span> </span><br><span class="line">    volumes:</span><br><span class="line">      - /root/docker-compose-service/mysql/data:/<span class="keyword">var</span>/lib/mysql</span><br><span class="line">      - /root/docker-compose-service/mysql/conf/my.cnf:/etc/my.cnf</span><br><span class="line">   </span><br><span class="line">  redis:</span><br><span class="line">    image: redis</span><br><span class="line">    container_name: redis</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">    command: redis-server /usr/local/etc/redis/redis.conf</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /root/docker-compose-service/redis/data:/<span class="keyword">var</span>/lib/redis/data</span><br><span class="line">      - /root/docker-compose-service/redis/redis.conf:/usr/local/etc/redis/redis.conf   </span><br><span class="line">    </span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx</span><br><span class="line">    container_name: nginx</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;82:80&quot;</span></span><br><span class="line">      - <span class="string">&quot;443:443&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /root/docker-compose-service/nginx/conf.d:/etc/nginx/conf.d</span><br><span class="line">      - /root/docker-compose-service/nginx/log:/<span class="keyword">var</span>/log/nginx</span><br><span class="line">      - /root/docker-compose-service/nginx/www:/etc/nginx/html</span><br><span class="line">      - /root/docker-compose-service/nginx/etc/letsencrypt:/etc/letsencrypt</span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls		#验证文件是否创建成功</span><br></pre></td></tr></table></figure>

<h3 id="3-4、后台启动"><a href="#3-4、后台启动" class="headerlink" title="3.4、后台启动"></a>3.4、后台启动</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013427.png"></p>
<p>安装完成</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013437.png"></p>
<p><strong>由于nacos依赖于mysql, 所以这里单独把nacos配置拿出来</strong></p>
<h3 id="3-5、配置数据库"><a href="#3-5、配置数据库" class="headerlink" title="3.5、配置数据库"></a>3.5、配置数据库</h3><p>这里很重要，一定要等到mysql安装成功并启动完后再重新创建nacos数据库</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013450.png"></p>
<p>之后再安装nacos容器</p>
<h4 id="3-5-1、下载nacos-config-sql文件"><a href="#3-5-1、下载nacos-config-sql文件" class="headerlink" title="3.5.1、下载nacos_config.sql文件"></a>3.5.1、下载nacos_config.sql文件</h4><p><strong>nacos初始化sql,需要先创建nacos数据库后，然后执行下面的sql</strong></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvbmFjb3MvYmxvYi9tYXN0ZXIvY29uZmlnL3NyYy9tYWluL3Jlc291cmNlcy9NRVRBLUlORi9uYWNvcy1kYi5zcWw=">https://github.com/alibaba/nacos/blob/master/config/src/main/resources/META-INF/nacos-db.sql<i class="fa fa-external-link-alt"></i></span></p>
<p>或者直接将下列sql保存到记事本，重命名为nacos_config.sql</p>
<p><strong>nacos_config.sql文件</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `config_info` (</span><br><span class="line">  `id` bigint(<span class="number">20</span>) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,</span><br><span class="line">  `data_id` varchar(<span class="number">255</span>) NOT NULL COMMENT &#x27;data_id&#x27;,</span><br><span class="line">  `group_id` varchar(<span class="number">255</span>) DEFAULT NULL,</span><br><span class="line">  `content` longtext NOT NULL COMMENT &#x27;content&#x27;,</span><br><span class="line">  `md5` varchar(<span class="number">32</span>) DEFAULT NULL COMMENT &#x27;md5&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL DEFAULT &#x27;<span class="number">2010</span><span class="number">-05</span><span class="number">-05</span> <span class="number">000000</span>&#x27; COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL DEFAULT &#x27;<span class="number">2010</span><span class="number">-05</span><span class="number">-05</span> <span class="number">000000</span>&#x27; COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  `src_user` text COMMENT &#x27;source user&#x27;,</span><br><span class="line">  `src_ip` varchar(<span class="number">20</span>) DEFAULT NULL COMMENT &#x27;source ip&#x27;,</span><br><span class="line">  `app_name` varchar(<span class="number">128</span>) DEFAULT NULL,</span><br><span class="line">  `tenant_id` varchar(<span class="number">128</span>) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,</span><br><span class="line">  `c_desc` varchar(<span class="number">256</span>) DEFAULT NULL,</span><br><span class="line">  `c_use` varchar(<span class="number">64</span>) DEFAULT NULL,</span><br><span class="line">  `effect` varchar(<span class="number">64</span>) DEFAULT NULL,</span><br><span class="line">  `type` varchar(<span class="number">64</span>) DEFAULT NULL,</span><br><span class="line">  `c_schema` text,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_info&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE `config_info_aggr` (</span><br><span class="line">  `id` bigint(<span class="number">20</span>) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,</span><br><span class="line">  `data_id` varchar(<span class="number">255</span>) NOT NULL COMMENT &#x27;data_id&#x27;,</span><br><span class="line">  `group_id` varchar(<span class="number">255</span>) NOT NULL COMMENT &#x27;group_id&#x27;,</span><br><span class="line">  `datum_id` varchar(<span class="number">255</span>) NOT NULL COMMENT &#x27;datum_id&#x27;,</span><br><span class="line">  `content` longtext NOT NULL COMMENT &#x27;内容&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  `app_name` varchar(<span class="number">128</span>) DEFAULT NULL,</span><br><span class="line">  `tenant_id` varchar(<span class="number">128</span>) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;增加租户字段&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE `config_info_beta` (</span><br><span class="line">  `id` bigint(<span class="number">20</span>) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,</span><br><span class="line">  `data_id` varchar(<span class="number">255</span>) NOT NULL COMMENT &#x27;data_id&#x27;,</span><br><span class="line">  `group_id` varchar(<span class="number">128</span>) NOT NULL COMMENT &#x27;group_id&#x27;,</span><br><span class="line">  `app_name` varchar(<span class="number">128</span>) DEFAULT NULL COMMENT &#x27;app_name&#x27;,</span><br><span class="line">  `content` longtext NOT NULL COMMENT &#x27;content&#x27;,</span><br><span class="line">  `beta_ips` varchar(<span class="number">1024</span>) DEFAULT NULL COMMENT &#x27;betaIps&#x27;,</span><br><span class="line">  `md5` varchar(<span class="number">32</span>) DEFAULT NULL COMMENT &#x27;md5&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL DEFAULT &#x27;<span class="number">2010</span><span class="number">-05</span><span class="number">-05</span> <span class="number">000000</span>&#x27; COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL DEFAULT &#x27;<span class="number">2010</span><span class="number">-05</span><span class="number">-05</span> <span class="number">000000</span>&#x27; COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  `src_user` text COMMENT &#x27;source user&#x27;,</span><br><span class="line">  `src_ip` varchar(<span class="number">20</span>) DEFAULT NULL COMMENT &#x27;source ip&#x27;,</span><br><span class="line">  `tenant_id` varchar(<span class="number">128</span>) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_info_beta&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE `config_info_tag` (</span><br><span class="line">  `id` bigint(<span class="number">20</span>) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,</span><br><span class="line">  `data_id` varchar(<span class="number">255</span>) NOT NULL COMMENT &#x27;data_id&#x27;,</span><br><span class="line">  `group_id` varchar(<span class="number">128</span>) NOT NULL COMMENT &#x27;group_id&#x27;,</span><br><span class="line">  `tenant_id` varchar(<span class="number">128</span>) DEFAULT &#x27;&#x27; COMMENT &#x27;tenant_id&#x27;,</span><br><span class="line">  `tag_id` varchar(<span class="number">128</span>) NOT NULL COMMENT &#x27;tag_id&#x27;,</span><br><span class="line">  `app_name` varchar(<span class="number">128</span>) DEFAULT NULL COMMENT &#x27;app_name&#x27;,</span><br><span class="line">  `content` longtext NOT NULL COMMENT &#x27;content&#x27;,</span><br><span class="line">  `md5` varchar(<span class="number">32</span>) DEFAULT NULL COMMENT &#x27;md5&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL DEFAULT &#x27;<span class="number">2010</span><span class="number">-05</span><span class="number">-05</span> <span class="number">000000</span>&#x27; COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL DEFAULT &#x27;<span class="number">2010</span><span class="number">-05</span><span class="number">-05</span> <span class="number">000000</span>&#x27; COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  `src_user` text COMMENT &#x27;source user&#x27;,</span><br><span class="line">  `src_ip` varchar(<span class="number">20</span>) DEFAULT NULL COMMENT &#x27;source ip&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_info_tag&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE `config_tags_relation` (</span><br><span class="line">  `id` bigint(<span class="number">20</span>) NOT NULL COMMENT &#x27;id&#x27;,</span><br><span class="line">  `tag_name` varchar(<span class="number">128</span>) NOT NULL COMMENT &#x27;tag_name&#x27;,</span><br><span class="line">  `tag_type` varchar(<span class="number">64</span>) DEFAULT NULL COMMENT &#x27;tag_type&#x27;,</span><br><span class="line">  `data_id` varchar(<span class="number">255</span>) NOT NULL COMMENT &#x27;data_id&#x27;,</span><br><span class="line">  `group_id` varchar(<span class="number">128</span>) NOT NULL COMMENT &#x27;group_id&#x27;,</span><br><span class="line">  `tenant_id` varchar(<span class="number">128</span>) DEFAULT &#x27;&#x27; COMMENT &#x27;tenant_id&#x27;,</span><br><span class="line">  `nid` bigint(<span class="number">20</span>) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  PRIMARY KEY (`nid`),</span><br><span class="line">  UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_tag_relation&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">CREATE TABLE `group_capacity` (</span><br><span class="line">  `id` bigint(<span class="number">20</span>) unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;主键ID&#x27;,</span><br><span class="line">  `group_id` varchar(<span class="number">128</span>) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;Group ID，空字符表示整个集群&#x27;,</span><br><span class="line">  `quota` int(<span class="number">10</span>) unsigned NOT NULL DEFAULT &#x27;<span class="number">0</span>&#x27; COMMENT &#x27;配额，<span class="number">0</span>表示使用默认值&#x27;,</span><br><span class="line">  `usage` int(<span class="number">10</span>) unsigned NOT NULL DEFAULT &#x27;<span class="number">0</span>&#x27; COMMENT &#x27;使用量&#x27;,</span><br><span class="line">  `max_size` int(<span class="number">10</span>) unsigned NOT NULL DEFAULT &#x27;<span class="number">0</span>&#x27; COMMENT &#x27;单个配置大小上限，单位为字节，<span class="number">0</span>表示使用默认值&#x27;,</span><br><span class="line">  `max_aggr_count` int(<span class="number">10</span>) unsigned NOT NULL DEFAULT &#x27;<span class="number">0</span>&#x27; COMMENT &#x27;聚合子配置最大个数，，<span class="number">0</span>表示使用默认值&#x27;,</span><br><span class="line">  `max_aggr_size` int(<span class="number">10</span>) unsigned NOT NULL DEFAULT &#x27;<span class="number">0</span>&#x27; COMMENT &#x27;单个聚合数据的子配置大小上限，单位为字节，<span class="number">0</span>表示使用默认值&#x27;,</span><br><span class="line">  `max_history_count` int(<span class="number">10</span>) unsigned NOT NULL DEFAULT &#x27;<span class="number">0</span>&#x27; COMMENT &#x27;最大变更历史数量&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL DEFAULT &#x27;<span class="number">2010</span><span class="number">-05</span><span class="number">-05</span> <span class="number">000000</span>&#x27; COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL DEFAULT &#x27;<span class="number">2010</span><span class="number">-05</span><span class="number">-05</span> <span class="number">000000</span>&#x27; COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;集群、各Group容量信息表&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">CREATE TABLE `his_config_info` (</span><br><span class="line">  `id` bigint(<span class="number">64</span>) unsigned NOT NULL,</span><br><span class="line">  `nid` bigint(<span class="number">20</span>) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `data_id` varchar(<span class="number">255</span>) NOT NULL,</span><br><span class="line">  `group_id` varchar(<span class="number">128</span>) NOT NULL,</span><br><span class="line">  `app_name` varchar(<span class="number">128</span>) DEFAULT NULL COMMENT &#x27;app_name&#x27;,</span><br><span class="line">  `content` longtext NOT NULL,</span><br><span class="line">  `md5` varchar(<span class="number">32</span>) DEFAULT NULL,</span><br><span class="line">  `gmt_create` datetime NOT NULL DEFAULT &#x27;<span class="number">2010</span><span class="number">-05</span><span class="number">-05</span> <span class="number">000000</span>&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL DEFAULT &#x27;<span class="number">2010</span><span class="number">-05</span><span class="number">-05</span> <span class="number">000000</span>&#x27;,</span><br><span class="line">  `src_user` text,</span><br><span class="line">  `src_ip` varchar(<span class="number">20</span>) DEFAULT NULL,</span><br><span class="line">  `op_type` char(<span class="number">10</span>) DEFAULT NULL,</span><br><span class="line">  `tenant_id` varchar(<span class="number">128</span>) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,</span><br><span class="line">  PRIMARY KEY (`nid`),</span><br><span class="line">  KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">  KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">  KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;多租户改造&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE `tenant_capacity` (</span><br><span class="line">  `id` bigint(<span class="number">20</span>) unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;主键ID&#x27;,</span><br><span class="line">  `tenant_id` varchar(<span class="number">128</span>) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;Tenant ID&#x27;,</span><br><span class="line">  `quota` int(<span class="number">10</span>) unsigned NOT NULL DEFAULT &#x27;<span class="number">0</span>&#x27; COMMENT &#x27;配额，<span class="number">0</span>表示使用默认值&#x27;,</span><br><span class="line">  `usage` int(<span class="number">10</span>) unsigned NOT NULL DEFAULT &#x27;<span class="number">0</span>&#x27; COMMENT &#x27;使用量&#x27;,</span><br><span class="line">  `max_size` int(<span class="number">10</span>) unsigned NOT NULL DEFAULT &#x27;<span class="number">0</span>&#x27; COMMENT &#x27;单个配置大小上限，单位为字节，<span class="number">0</span>表示使用默认值&#x27;,</span><br><span class="line">  `max_aggr_count` int(<span class="number">10</span>) unsigned NOT NULL DEFAULT &#x27;<span class="number">0</span>&#x27; COMMENT &#x27;聚合子配置最大个数&#x27;,</span><br><span class="line">  `max_aggr_size` int(<span class="number">10</span>) unsigned NOT NULL DEFAULT &#x27;<span class="number">0</span>&#x27; COMMENT &#x27;单个聚合数据的子配置大小上限，单位为字节，<span class="number">0</span>表示使用默认值&#x27;,</span><br><span class="line">  `max_history_count` int(<span class="number">10</span>) unsigned NOT NULL DEFAULT &#x27;<span class="number">0</span>&#x27; COMMENT &#x27;最大变更历史数量&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL DEFAULT &#x27;<span class="number">2010</span><span class="number">-05</span><span class="number">-05</span> <span class="number">000000</span>&#x27; COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL DEFAULT &#x27;<span class="number">2010</span><span class="number">-05</span><span class="number">-05</span> <span class="number">000000</span>&#x27; COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;租户容量信息表&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE `tenant_info` (</span><br><span class="line">  `id` bigint(<span class="number">20</span>) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,</span><br><span class="line">  `kp` varchar(<span class="number">128</span>) NOT NULL COMMENT &#x27;kp&#x27;,</span><br><span class="line">  `tenant_id` varchar(<span class="number">128</span>) default &#x27;&#x27; COMMENT &#x27;tenant_id&#x27;,</span><br><span class="line">  `tenant_name` varchar(<span class="number">128</span>) default &#x27;&#x27; COMMENT &#x27;tenant_name&#x27;,</span><br><span class="line">  `tenant_desc` varchar(<span class="number">256</span>) DEFAULT NULL COMMENT &#x27;tenant_desc&#x27;,</span><br><span class="line">  `create_source` varchar(<span class="number">32</span>) DEFAULT NULL COMMENT &#x27;create_source&#x27;,</span><br><span class="line">  `gmt_create` bigint(<span class="number">20</span>) NOT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` bigint(<span class="number">20</span>) NOT NULL COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;tenant_info&#x27;;</span><br><span class="line"></span><br><span class="line">CREATE TABLE users (</span><br><span class="line">	username varchar(<span class="number">50</span>) NOT NULL PRIMARY KEY,</span><br><span class="line">	password varchar(<span class="number">500</span>) NOT NULL,</span><br><span class="line">	enabled boolean NOT NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE roles (</span><br><span class="line">	username varchar(<span class="number">50</span>) NOT NULL,</span><br><span class="line">	role varchar(<span class="number">50</span>) NOT NULL,</span><br><span class="line">	constraint uk_username_role UNIQUE (username,role)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE permissions (</span><br><span class="line">    role varchar(<span class="number">50</span>) NOT NULL,</span><br><span class="line">    resource varchar(<span class="number">512</span>) NOT NULL,</span><br><span class="line">    action varchar(<span class="number">8</span>) NOT NULL,</span><br><span class="line">    constraint uk_role_permission UNIQUE (role,resource,action)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO users (username, password, enabled) VALUES (&#x27;nacos&#x27;, &#x27;$<span class="number">2</span>a$<span class="number">10</span>$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;, TRUE);</span><br><span class="line"></span><br><span class="line">INSERT INTO roles (username, role) VALUES (&#x27;nacos&#x27;, &#x27;ROLE_ADMIN&#x27;);</span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013502.png"></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013508.png"></p>
<h4 id="3-5-2、navicat连接mysql"><a href="#3-5-2、navicat连接mysql" class="headerlink" title="3.5.2、navicat连接mysql"></a>3.5.2、navicat连接mysql</h4><p><strong>navicat连接服务器上已经安装好并运行的mysql</strong></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013522.png"></p>
<h4 id="3-5-3、创建数据库"><a href="#3-5-3、创建数据库" class="headerlink" title="3.5.3、创建数据库"></a>3.5.3、创建数据库</h4><p>数据库名称和sql文件名一致，字符集和排序规则对应sql文件要求</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">nacos_config</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013529.png"></p>
<h4 id="3-5-4、运行sql文件"><a href="#3-5-4、运行sql文件" class="headerlink" title="3.5.4、运行sql文件"></a>3.5.4、运行sql文件</h4><p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013537.png"></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013541.png"></p>
<p>刷新得到如下表信息代表数据库创建成功</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013546.png"></p>
<h4 id="3-5-5、注意"><a href="#3-5-5、注意" class="headerlink" title="3.5.5、注意"></a>3.5.5、注意</h4><p><strong>1.1.4 升级1.3.1需要执行的脚本</strong></p>
<p>ALTER TABLE <code>roles</code> ADD UNIQUE <code>uk_username_role</code> (<code>username</code>, <code>role</code>); CREATE TABLE permissions ( role varchar(<strong>50</strong>) NOT NULL, resource varchar(<strong>512</strong>) NOTNULL, action varchar(<strong>8</strong>) NOT NULL, constraint uk_role_permission UNIQUE (role,resource,action) ) ROW_FORMAT=DYNAMIC;</p>
<p>如果启动1.3.1报错，比如mysql时区异常，把conf配置文件弄到主机上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp nacos1.3.1:/home/nacos/conf /home/dockerdata/nacos1.3.1 #修改mysql的配置后docker stop nacos1.3.1docker rm nacos1.3.1</span><br><span class="line">docker run -d \-e PREFER_HOST_MODE=ip \-e MODE=standalone \-e SPRING_DATASOURCE_PLATFORM=mysql \-e MYSQL_SERVICE_HOST=172.168.1.33 \-e MYSQL_SERVICE_PORT=3306 \-e MYSQL_SERVICE_USER=root \-e MYSQL_SERVICE_PASSWORD=root \-e MYSQL_SERVICE_DB_NAME=nacos \-e TIME_ZONE=&#x27;Asia/Shanghai&#x27; \-v /home/dockerdata/nacos1.3.1/logs:/home/nacos/logs \-v /home/dockerdata/nacos1.3.1/conf:/home/nacos/conf \-p 8848:8848 \--name nacos1.3.1 \--restart=always \nacos/nacos-server:1.3.1</span><br></pre></td></tr></table></figure>



<p><strong>安装nacos时，一定要先打开刚才创建好的数据库，否则在启动nacos 会报下面的错</strong></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013556.png"></p>
<p>No DataSource set</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR Application run failed</span><br><span class="line"></span><br><span class="line">org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#x27;opsController&#x27; defined in URL [jar:file:/home/nacos/target/nacos-server.jar!/BOOT-INF/lib/nacos-config-1.1.4.jar!/com/alibaba/nacos/config/server/controller/OpsController.class]: Unsatisfied dependency expressed through constructor parameter 1; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;dumpService&#x27;: Invocation of init method failed; nested exception is java.lang.RuntimeException: Nacos Server did not start because dumpservice bean construction failure :</span><br><span class="line">No DataSource set</span><br><span class="line">    at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:769)</span><br><span class="line">    at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:218)</span><br><span class="line">    </span><br><span class="line">    ... 40 common frames omitted</span><br></pre></td></tr></table></figure>

<p>最后不要忘记更改阿里云安全组的配置规则 </p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013603.png"></p>
<h3 id="3-6、打开docker-compose-yml"><a href="#3-6、打开docker-compose-yml" class="headerlink" title="3.6、打开docker-compose.yml"></a>3.6、打开docker-compose.yml</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">cd docker-compose-servicevim docker-compose<span class="selector-class">.yml</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013608.png"></p>
<h4 id="3-6-1、点击-i-添加下面内容"><a href="#3-6-1、点击-i-添加下面内容" class="headerlink" title="3.6.1、点击 i 添加下面内容"></a>3.6.1、点击 i <strong>添加下面内容</strong></h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&quot;3&quot;</span></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  mysql:</span><br><span class="line">    image: mysql:<span class="number">5.7</span></span><br><span class="line">    container_name: mysql</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;3307:3306&quot;</span></span><br><span class="line">    command:</span><br><span class="line">      --<span class="literal">default</span>-authentication-plugin=mysql_native_password</span><br><span class="line">      --character-<span class="keyword">set</span>-server=utf8mb4</span><br><span class="line">      --collation-server=utf8mb4_general_ci</span><br><span class="line">      --explicit_defaults_for_timestamp=<span class="literal">true</span></span><br><span class="line">      --lower_case_table_names=<span class="number">1</span> </span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: <span class="string">&quot;root&quot;</span> </span><br><span class="line">    volumes:</span><br><span class="line">      - /root/docker-compose-service/mysql/data:/<span class="keyword">var</span>/lib/mysql</span><br><span class="line">      - /root/docker-compose-service/mysql/conf/my.cnf:/etc/my.cnf</span><br><span class="line">   </span><br><span class="line">  redis:</span><br><span class="line">    image: redis</span><br><span class="line">    container_name: redis</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">    command: redis-server /usr/local/etc/redis/redis.conf</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /root/docker-compose-service/redis/data:/<span class="keyword">var</span>/lib/redis/data</span><br><span class="line">      - /root/docker-compose-service/redis/redis.conf:/usr/local/etc/redis/redis.conf   </span><br><span class="line">    </span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx</span><br><span class="line">    container_name: nginx</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;82:80&quot;</span></span><br><span class="line">      - <span class="string">&quot;443:443&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /root/docker-compose-service/nginx/conf.d:/etc/nginx/conf.d</span><br><span class="line">      - /root/docker-compose-service/nginx/log:/<span class="keyword">var</span>/log/nginx</span><br><span class="line">      - /root/docker-compose-service/nginx/www:/etc/nginx/html</span><br><span class="line">      - /root/docker-compose-service/nginx/etc/letsencrypt:/etc/letsencrypt</span><br><span class="line">      </span><br><span class="line">  nacos:</span><br><span class="line">    image: nacos/nacos-server:<span class="number">1.1</span><span class="number">.4</span></span><br><span class="line">    container_name: nacos</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - PREFER_HOST_MODE=ip</span><br><span class="line">      - MODE=standalone</span><br><span class="line">      - SPRING_DATASOURCE_PLATFORM=mysql</span><br><span class="line">      - MYSQL_MASTER_SERVICE_HOST=<span class="number">123.56</span><span class="number">.71</span><span class="number">.102</span></span><br><span class="line">      - MYSQL_MASTER_SERVICE_PORT=<span class="number">3307</span></span><br><span class="line">      - MYSQL_MASTER_SERVICE_USER=root</span><br><span class="line">      - MYSQL_MASTER_SERVICE_PASSWORD=root</span><br><span class="line">      - MYSQL_MASTER_SERVICE_DB_NAME=nacos_config</span><br><span class="line">      - MYSQL_SLAVE_SERVICE_HOST=<span class="number">123.56</span><span class="number">.71</span><span class="number">.102</span></span><br><span class="line">      - MYSQL_SLAVE_SERVICE_PORT=<span class="number">3307</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /root/docker-compose-service/nacos:/home/nacos/logs</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8848:8848&quot;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nacos:</span><br><span class="line">    image: nacos/nacos-server:1.1.4</span><br><span class="line">    container_name: nacos</span><br><span class="line">    environment:</span><br><span class="line">      - PREFER_HOST_MODE=ip</span><br><span class="line">      - MODE=standalone</span><br><span class="line">      - SPRING_DATASOURCE_PLATFORM=mysql</span><br><span class="line">      - MYSQL_MASTER_SERVICE_HOST=123.56.71.102</span><br><span class="line">      - MYSQL_MASTER_SERVICE_PORT=3307</span><br><span class="line">      - MYSQL_MASTER_SERVICE_USER=root</span><br><span class="line">      - MYSQL_MASTER_SERVICE_PASSWORD=root</span><br><span class="line">      - MYSQL_MASTER_SERVICE_DB_NAME=nacos_config</span><br><span class="line">      - MYSQL_SLAVE_SERVICE_HOST=123.56.71.102</span><br><span class="line">      - MYSQL_SLAVE_SERVICE_PORT=3307</span><br><span class="line">    volumes:</span><br><span class="line">      - /root/docker-compose-service/nacos:/home/nacos/logs</span><br><span class="line">    ports:</span><br><span class="line">      - 8848:8848 </span><br><span class="line">    restart: always </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> elasticsearch:</span><br><span class="line">    image: elasticsearch:7.4.2</span><br><span class="line">    container_name: es7</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - discovery.type=single-node</span><br><span class="line">      - ES_JAVA_POTS=&quot;-Xms64m -Xmx512m&quot;</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;9200:9200&quot;</span><br><span class="line">      - &quot;9300:9300&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - /root/docker-compose-service/elasticsearch/data:/usr/share/elasticsearch/data</span><br><span class="line">    </span><br><span class="line">          </span><br><span class="line"> kibana:    </span><br><span class="line">    image: kibana:7.4.2</span><br><span class="line">    container_name: kibana</span><br><span class="line">    restart: always</span><br><span class="line">    environment: </span><br><span class="line">      - I18N_LOCALE=zh-CN  </span><br><span class="line">      - XPACK_GRAPH_ENABLED=true</span><br><span class="line">      - TIMELION_ENABLED=true</span><br><span class="line">      - XPACK_MONITORING_COLLECTION_ENABLED=&quot;true&quot;</span><br><span class="line">      - ELASTICSEARCH_HOSTS=http://es:9200</span><br><span class="line">      - xpack.monitoring.ui.container.elasticsearch.enabled=false</span><br><span class="line">    links:</span><br><span class="line">      - &quot;elasticsearch&quot;</span><br><span class="line">    ports: </span><br><span class="line">      - &quot;5601:5601&quot;</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013616.png"></p>
<p><strong>点击ESC</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">：wq		保存退出</span><br></pre></td></tr></table></figure>

<h3 id="3-7、创建并启动nacos"><a href="#3-7、创建并启动nacos" class="headerlink" title="3.7、创建并启动nacos"></a>3.7、创建并启动nacos</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013619.png"></p>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><p><font color="cornflowerblue">docker-compose.yml</font></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&quot;3&quot;</span></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  mysql:</span><br><span class="line">    image: mysql:<span class="number">5.7</span></span><br><span class="line">    container_name: mysql</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;3307:3306&quot;</span></span><br><span class="line">    command:</span><br><span class="line">      --<span class="literal">default</span>-authentication-plugin=mysql_native_password</span><br><span class="line">      --character-<span class="keyword">set</span>-server=utf8mb4</span><br><span class="line">      --collation-server=utf8mb4_general_ci</span><br><span class="line">      --explicit_defaults_for_timestamp=<span class="literal">true</span></span><br><span class="line">      --lower_case_table_names=<span class="number">1</span> </span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: <span class="string">&quot;root&quot;</span> </span><br><span class="line">    volumes:</span><br><span class="line">      - /root/docker-compose-service/mysql/data:/<span class="keyword">var</span>/lib/mysql</span><br><span class="line">      - /root/docker-compose-service/mysql/conf/my.cnf:/etc/my.cnf</span><br><span class="line">   </span><br><span class="line">  redis:</span><br><span class="line">    image: redis</span><br><span class="line">    container_name: redis</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">    command: redis-server /usr/local/etc/redis/redis.conf</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /root/docker-compose-service/redis/data:/<span class="keyword">var</span>/lib/redis/data</span><br><span class="line">      - /root/docker-compose-service/redis/redis.conf:/usr/local/etc/redis/redis.conf   </span><br><span class="line">    </span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx</span><br><span class="line">    container_name: nginx</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;82:80&quot;</span></span><br><span class="line">      - <span class="string">&quot;443:443&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /root/docker-compose-service/nginx/conf.d:/etc/nginx/conf.d</span><br><span class="line">      - /root/docker-compose-service/nginx/log:/<span class="keyword">var</span>/log/nginx</span><br><span class="line">      - /root/docker-compose-service/nginx/www:/etc/nginx/html</span><br><span class="line">      - /root/docker-compose-service/nginx/etc/letsencrypt:/etc/letsencrypt</span><br><span class="line">      </span><br><span class="line">  nacos:</span><br><span class="line">    image: nacos/nacos-server:<span class="number">1.1</span><span class="number">.4</span></span><br><span class="line">    container_name: nacos</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - PREFER_HOST_MODE=ip</span><br><span class="line">      - MODE=standalone</span><br><span class="line">      - SPRING_DATASOURCE_PLATFORM=mysql</span><br><span class="line">      - MYSQL_MASTER_SERVICE_HOST=<span class="number">123.56</span><span class="number">.71</span><span class="number">.102</span></span><br><span class="line">      - MYSQL_MASTER_SERVICE_PORT=<span class="number">3307</span></span><br><span class="line">      - MYSQL_MASTER_SERVICE_USER=root</span><br><span class="line">      - MYSQL_MASTER_SERVICE_PASSWORD=root</span><br><span class="line">      - MYSQL_MASTER_SERVICE_DB_NAME=nacos_config</span><br><span class="line">      - MYSQL_SLAVE_SERVICE_HOST=<span class="number">123.56</span><span class="number">.71</span><span class="number">.102</span></span><br><span class="line">      - MYSQL_SLAVE_SERVICE_PORT=<span class="number">3307</span></span><br><span class="line">    volumes:</span><br><span class="line">      - /root/docker-compose-service/nacos:/home/nacos/logs</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8848:8848&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-8、安装elasticsearch和kibana"><a href="#3-8、安装elasticsearch和kibana" class="headerlink" title="3.8、安装elasticsearch和kibana"></a>3.8、安装elasticsearch和kibana</h3><p>dokcer中安装elasticsearch</p>
<p>（1）下载ealastic search（存储和检索）和kibana（可视化检索）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">版本要统一docker pull elasticsearch:<span class="number">7.4</span>.<span class="number">2</span>docker pull kibana:<span class="number">7.4</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p><font color="orange">配置</font></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将docker里的目录挂载到linux的/root目录中<span class="comment"># 修改/root就可以改掉docker里的mkdir -p /root/docker-compose-service/elasticsearch/configmkdir -p /root/docker-compose-service/elasticsearch/data# es可以被远程任何机器访问#我的设置，注意格式echo &quot;http.host: 0.0.0.0&quot; &gt;/root/docker-compose-service/elasticsearch/config/elasticsearch.yml# 递归更改权限，es需要访问chmod -R 777 /root/docker-compose-service/elasticsearch/</span></span></span><br></pre></td></tr></table></figure>

<p>（2）、启动Elasticsearch</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 9200是用户交互端口 9300是集群心跳端口<span class="comment"># -e指定是单阶段运行# -e指定占用的内存大小，生产时可以设置32Gdocker run --name es7 -p 9200:9200 -p 9300:9300 \-e &quot;discovery.type=single-node&quot; \-e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; \-v /root/docker-compose-service/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \-v /root/docker-compose-service/elasticsearch/data:/usr/share/elasticsearch/data \-v /root/docker-compose-service/elasticsearch/plugins:/usr/share/elasticsearch/plugins \-d elasticsearch:7.4.2 # 设置开机启动elasticsearchdocker update es7 --restart=always</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果访问没有错，下面这一步可以跳过！！！</p>
<p>因为容器里的文件映射到了外面，所以删除容器和新建容器数据还在</p>
</blockquote>
<blockquote>
<p>第一次查docker ps启动了，第二次查的时候发现关闭了，docker logs elasticsearch</p>
<p><span class="exturl" data-url="aHR0cDovLzEyMy41Ni43MS4xMDI6OTIwMC8=">http://123.56.71.102:9200<i class="fa fa-external-link-alt"></i></span></p>
<p>数据挂载到外面，但是访问权限不足</p>
<p>把/mydata/elasticsearch下文件夹的权限设置好，上面已经设置过了</p>
</blockquote>
<blockquote>
<p>遇到了更新阿里源也下载不下来kibana镜像的情况，先在别的网络下载下来后传到vagrant中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker save -o kibana.tar kibana:7.4.2 </span><br><span class="line"></span><br><span class="line">docker load -i kibana.tar </span><br><span class="line"></span><br><span class="line"><span class="comment"># 如何通过其他工具链接ssh</span></span><br><span class="line"></span><br><span class="line">修改/etc/ssh/sshd_config</span><br><span class="line">修改 PasswordAuthentication yes</span><br><span class="line"></span><br><span class="line">systemctl restart sshd.service  或 service sshd restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接192.168.56.10:22端口成功，用户名root，密码vagrant</span></span><br><span class="line"></span><br><span class="line">也可以通过vagrant ssh-config查看ip和端口，此时是127.0.0.1:2222</span><br></pre></td></tr></table></figure>

<p>在安装离线docker镜像的时候还提示内存不足，看了下是因为外部挂载的内存也算在了vagrant中，即使外部删了很多文件，vagrant中df -h硬盘占用率也不下降。我在外部删完文件后在内部又rm -rf XXX 强行接触占用</p>
</blockquote>
<p>（3）启动kibana：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> kibana指定了了ES交互端口9200  <span class="comment"># 5600为kibana主页端口</span></span></span><br><span class="line">docker run --name kibana -e ELASTICSEARCH_HOSTS=http://123.56.71.102:9200 -p 5601:5601 -d kibana:7.4.2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置开机启动kibana</span></span><br><span class="line">docker update kibana --restart=always</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -name+文件夹名find / -name kibana</span><br></pre></td></tr></table></figure>

<p>（4）测试</p>
<h4 id="访问elasticsearch"><a href="#访问elasticsearch" class="headerlink" title="访问elasticsearch"></a>访问elasticsearch</h4><p>查看elasticsearch版本信息： <span class="exturl" data-url="aHR0cDovLzEyMy41Ni43MS4xMDI6OTIwMC8=">http://123.56.71.102:9200<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721005212.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;4334173899e6&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_name&quot;</span> : <span class="string">&quot;elasticsearch&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_uuid&quot;</span> : <span class="string">&quot;JswYk6h3RdS-ybdiEVGEFg&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;number&quot;</span> : <span class="string">&quot;7.4.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_flavor&quot;</span> : <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_type&quot;</span> : <span class="string">&quot;docker&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_hash&quot;</span> : <span class="string">&quot;2f90bbf7b93631e52bafb59b3b049cb44ec25e96&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_date&quot;</span> : <span class="string">&quot;2019-10-28T20:40:44.881551Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_snapshot&quot;</span> : <span class="keyword">false</span>,</span><br><span class="line">    <span class="string">&quot;lucene_version&quot;</span> : <span class="string">&quot;8.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minimum_wire_compatibility_version&quot;</span> : <span class="string">&quot;6.8.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minimum_index_compatibility_version&quot;</span> : <span class="string">&quot;6.0.0-beta1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;tagline&quot;</span> : <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>显示elasticsearch 节点信息<span class="exturl" data-url="aHR0cDovLzEyMy41Ni43MS4xMDI6OTIwMC9fY2F0L25vZGVz">http://123.56.71.102:9200/_cat/nodes<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721020718.png"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">14</span> <span class="number">96</span> <span class="number">48</span> <span class="number">9.99</span> <span class="number">11.11</span> <span class="number">12.10</span> dilm * <span class="number">4334173899e6</span></span><br><span class="line"></span><br><span class="line"><span class="number">4334173899e6</span>代表上面的结点</span><br><span class="line">*代表是主节点</span><br></pre></td></tr></table></figure>

<h4 id="访问kibana"><a href="#访问kibana" class="headerlink" title="访问kibana"></a>访问kibana</h4><p>访问Kibana： <span class="exturl" data-url="aHR0cDovLzEyMy41Ni43MS4xMDI6NTYwMS9hcHAva2liYW5h">http://123.56.71.102:5601/app/kibana<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721005143.png"></p>
<h3 id="3-9、查看容器运行状态"><a href="#3-9、查看容器运行状态" class="headerlink" title="3.9、查看容器运行状态"></a>3.9、查看容器运行状态</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013633.png"></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013637.png"></p>
<h3 id="3-10、访问测试"><a href="#3-10、访问测试" class="headerlink" title="3.10、访问测试"></a>3.10、访问测试</h3><p>1、</p>
<p>在浏览器访问 <span class="exturl" data-url="aHR0cDovL2lwOjg4NDgvbmFjb3MvaW5kZXguaHRtbA==">http://ip:8848/nacos/index.html<i class="fa fa-external-link-alt"></i></span></p>
<p>我的nacos地址:    <span class="exturl" data-url="aHR0cDovLzEyMy41Ni43MS4xMDI6ODg0OC9uYWNvcw==">http://123.56.71.102:8848/nacos<i class="fa fa-external-link-alt"></i></span></p>
<p>默认登录账号 nacos/nacos</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721020803.png"></p>
<p>2、</p>
<p>查看elasticsearch版本信息： <span class="exturl" data-url="aHR0cDovL2lwOjkyMDAv">http://ip:9200<i class="fa fa-external-link-alt"></i></span></p>
<p>我的elasticsearch地址：    <span class="exturl" data-url="aHR0cDovLzEyMy41Ni43MS4xMDI6OTIwMC8=">http://123.56.71.102:9200<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721002726.png"></p>
<p>3、</p>
<p>访问kibana： <span class="exturl" data-url="aHR0cDovL2lwOjU2MDEvYXBwL2tpYmFuYQ==">http://ip:5601/app/kibana<i class="fa fa-external-link-alt"></i></span></p>
<p>我的kibana地址:     <span class="exturl" data-url="aHR0cDovLzEyMy41Ni43MS4xMDI6NTYwMS9hcHAva2liYW5h">http://123.56.71.102:5601/app/kibana<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721002703.png"></p>
<h3 id="3-11、可以查看启动日志"><a href="#3-11、可以查看启动日志" class="headerlink" title="3.11、可以查看启动日志"></a>3.11、可以查看启动日志</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">docker-compose logs -f </span><br><span class="line">docker-compose logs -f elasticsearch</span><br></pre></td></tr></table></figure>

<h3 id="3-12、遇到问题"><a href="#3-12、遇到问题" class="headerlink" title="3.12、遇到问题"></a>3.12、遇到问题</h3><h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h4><p><font color="red">执行docker-compose up -d命令或者其他docker-compose 命令时报错：</font></p>
<p><font color="red">ERROR: Top level object in ‘./../docker-compose.yml’ needs to be an object not ‘&lt;class ‘NoneType’&gt;’</font></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210719165607.png"></p>
<p><font color="cornflowerblue">解决办法</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">cd docker-compose-service		#切换到docker-compose-service文件夹下</span><br><span class="line"></span><br><span class="line">docker-compose up -d		#启动容器</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210719172143.png"></p>
<h4 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h4><p><font color="red">测试-查看elasticsearch版本信息：</font><span class="exturl" data-url="aHR0cDovL2lwOjkyMDAv">http://ip:9200<i class="fa fa-external-link-alt"></i></span><font color="red">的时候访问不了，页面404</font></p>
<p>我的是访问地址是： <span class="exturl" data-url="aHR0cDovLzEyMy41Ni43MS4xMDI6OTIwMC8=">http://123.56.71.102:9200<i class="fa fa-external-link-alt"></i></span></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721005928.jpeg"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">docker-compose logs -f elasticsearch</span><br></pre></td></tr></table></figure>

<p><font color="red">查看日志发现是docker启动elasticsearch时内存不足问题</font></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210719184041.png"></p>
<p><font color="cornflowerblue">解决方法</font></p>
<p>系统centos7（阿里云轻量级服务器）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">cat /etc/redhat-release</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210719184201.png"></p>
<p><strong>docker ps</strong>查看容器并没有启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p><strong>docker ps -a</strong> 查看容器确实创建了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">elasticsearch启动时遇到的错误:max virtual memory areas vm.<span class="built_in">max_count</span>(<span class="number">65530</span>) is too low...</span><br><span class="line"></span><br><span class="line">问题翻译过来就是：elasticsearch用户拥有的内存权限太小，至少需要<span class="number">262144</span>；</span><br><span class="line"></span><br><span class="line">解决步骤：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>.先切换到root用户；</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.执行命令：</span><br><span class="line"></span><br><span class="line">sysctl -w vm.max_map_count=<span class="number">262144</span></span><br><span class="line"></span><br><span class="line">可以查看结果：</span><br><span class="line"></span><br><span class="line">sysctl -a|grep vm.max_map_count</span><br><span class="line"></span><br><span class="line">会显示如下信息：</span><br><span class="line"></span><br><span class="line">vm.max_map_count = <span class="number">262144</span></span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">上述方法修改之后，如果重启虚拟机将失效，所以：</span><br><span class="line"></span><br><span class="line">一劳永逸的解决办法：</span><br><span class="line"></span><br><span class="line">在/etc/sysctl.conf文件的最后添加一行代码：</span><br><span class="line"></span><br><span class="line">vm.max_map_count=<span class="number">262144</span></span><br><span class="line"></span><br><span class="line">即可永久修改。</span><br></pre></td></tr></table></figure>

<p><font color="orange">修改jvm.options文件配置</font><br>首先查找jvm.options文件位置（每个服务器的位置可能不同）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[root@iZ2ze19s1rdzjjp5gfjaxxZ docker-compose-service]</span># find / -name jvm<span class="selector-class">.options</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">/<span class="selector-tag">var</span>/lib/docker/overlay2/<span class="number">49</span>a2b650efb59c15193c66816a5c5295a3bed005651073e86d60c4ee179b0020/merged/usr/share/elasticsearch/config/jvm<span class="selector-class">.options</span></span><br><span class="line">  </span><br><span class="line">/<span class="selector-tag">var</span>/lib/docker/overlay2/<span class="number">6</span>ca0cfbb248af40428cbe5b9112fc76b07dcc9155c7921f5bae36e1e29dcce89/diff/usr/share/elasticsearch/config/jvm<span class="selector-class">.options</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721001529.png"></p>
<p>vim进入文件修改虚拟机最小内存</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">vi</span><br><span class="line">/<span class="selector-tag">var</span>/lib/docker/overlay2/<span class="number">49</span>a2b650efb59c15193c66816a5c5295a3bed005651073e86d60c4ee179b0020/merged/usr/share/elasticsearch/config/jvm<span class="selector-class">.options</span></span><br><span class="line"></span><br><span class="line">vi /<span class="selector-tag">var</span>/lib/docker/overlay2/<span class="number">6</span>ca0cfbb248af40428cbe5b9112fc76b07dcc9155c7921f5bae36e1e29dcce89/diff/usr/share/elasticsearch/config/jvm<span class="selector-class">.options</span></span><br></pre></td></tr></table></figure>

<p><font color="orange">找到-Xms属性，修改成512m</font>（我的elasticsearch:7.4.2默认为1g）</p>
<p>保存并退出<br>vim中按i进入编辑模式，按ESC退出编辑模式，按：进入命令模式，然后在底部命令行输入w为保存，q为退出，q!为强制退出。</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210719202655.png"></p>
<p>再次启动容器，docker ps查看容器启动成功</p>
<p> 如果这时还是启动不了，使用top命令查看消耗cpu较多的进程</p>
<p>使用kill -9 进程号 杀死进程</p>
<p>再次启动elasticsearch就可以了!<img src="C:/Users/28431/AppData/Roaming/Typora/typora-user-images/image-20210721142301901.png"></p>
<p>kibana也可以正常访问了，如果访问不了就等几分钟再试试！</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721010416.png"></p>
<h4 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h4><p>引入了一个镜像，由于要修改一个参数，因此要进入容器中，一般使用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器名 /bin/bash</span><br></pre></td></tr></table></figure>

<p><font color="red">然而报错:</font></p>
<p><font color="red">OCI runtime exec failed: exec failed: container_linux.go:380: starting container process caused: exec: “281c4544b77c”: executable file not found in $PATH: unknown</font></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210720151023.png"></p>
<p><font color="cornflowerblue">解决方法</font><br>原来该镜像是使用alpine制作的，要进入该容器需要输入</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器名 /bin/shdocker exec -it kibana /bin/shdocker exec -it es7 /bin/shnetwork<span class="selector-class">.host</span>: <span class="number">123.56</span>.<span class="number">71.102</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210720151621.png"></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210720152325.png"></p>
<h4 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h4><p><font color="red">访问Kibana：</font> <span class="exturl" data-url="aHR0cDovLzEyMy41Ni43MS4xMDI6NTYwMS9hcHAva2liYW5h">http://123.56.71.102:5601/app/kibana<i class="fa fa-external-link-alt"></i></span><font color="red">出错</font></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721020859.png"></p>
<p><font color="cornflowerblue">解决办法</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">docker inspect es7  |grep IPAddress</span><br></pre></td></tr></table></figure>

<ol>
<li>查看ElasticSearch 的容器内部 ip：</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">docker inspect 容器IDdocker inspect e80a93e11ab7</span><br></pre></td></tr></table></figure>

<p>找到Networks下的IPAddress：</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210720152912.png"></p>
<p>记住该IP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IPAddress:	172.17.0.3</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>进入Kibana容器：</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器名 /bin/bashdocker exec -it kibana /bin/sh		#进入kibanadocker exec -it es7 /bin/sh				#进入elasticsearch</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">cd configvi kibana<span class="selector-class">.yml</span></span><br></pre></td></tr></table></figure>

<p>修改对应的ip，将”<span class="exturl" data-url="aHR0cDovL2VsYXN0aWNzZWFyY2g6OTIwMCZxdW90Ow==">http://elasticsearch:9200&quot;<i class="fa fa-external-link-alt"></i></span> 中的 elasticsearch 替换成第一步的ip就好了。</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210720153730.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server.name: kibanaserver.host: &quot;0&quot;elasticsearch.hosts: [ &quot;http://172.17.0.3.102:9200&quot; ]xpack.monitoring.ui.container.elasticsearch.enabled: true</span><br></pre></td></tr></table></figure>

<p><font color="cornflowerblue">我的设置</font></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210720154355.png"></p>
<ol start="3">
<li>修改完成后退出容器，再重启容器就好了</li>
</ol>
<p>docker stop kiban容器id<br>docker restart kibana容器id<br>再次访问localhost:5601, 正常了</p>
<h4 id="问题5"><a href="#问题5" class="headerlink" title="问题5"></a>问题5</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、内存不足问题　　因为练手使用的是aliyun，内存只有1GB，而es默认设置jvm最少需要1GB的堆内存，因此在启动时会报一个内存分配错误，具体的错误截图没保留，因此就不贴了。　　解决方法：修改config/jvm.options里面的-Xms和-Xmx的值为合适大小。2、can not run elasticsearch as root　　 [看网上的文章说是不能用root用户启动](https://www.cnblogs.com/sandyyeh/p/8413724.html)，需要换其它用户。　　解决方法：我是执行adduser命令新增了一个esuser用户，再把es的文件夹移动到home/esuser下面，再更改es文件夹的拥有者sudo chown -R esuser es文件夹，su esuser然后再执行脚本启动成功。 3、es启动是在前台　　启动es后，启动信息都显示在前台，无法切换出去，用ctrl+c会把es的进程关掉　　解决方法：我是用sh ./ bin/elasticsearch **-d** 来后台启动es的。4、在aliyun启动服务后，无法在自己的浏览器上访问es服务　　就像开头那个文章链接里说的，服务启动成功后要访问下127.0.0.1:9200来看看服务启动成功没 ，但是在aliyun启动后，ssh里访问127.0.0.1:9200是没问题的，但是我PC浏览器上无法访问。　　这里有两个问题，1是没把9200端口添加到aliyun后台的安全组规则白名单里面，2是es启动默认只监听127.0.0.1（本地环回）　　针对阿里云的安全组规则白名单我就不细说了，网上都有文章的，我这里只说说修改es只监听本地环回问题　　解决方法：修改config/elasticsearch.yml，把network.host前面的注释符号去掉，并把值改为0.0.0.0；把discovery.seed_hosts前面的注释符号去掉，并把值改为0.0.0.0,修改完之后重启服务，然后就能在自己的PC浏览器上访问9200端口了。　　改成0.0.0.0的一个弊端就是公网任何IP段都能直接访问你这个es的端口服务了，这个问题自己斟酌。</span><br></pre></td></tr></table></figure>

<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在使用docker时，如何追加端口最为方便正在使用的容器，在开发过程中突然需要 443 端口，但是之前run的时候没有添加这个端口，现在想添加，除了export出来后重新run的方法外，还有更好的吗？1.第一步，找到这个Docker容器的IP地址。例如：[root@iZ2ze19s1rdzjjp5gfjaxxZ ~]# docker inspect &#x27;a362c88654dd&#x27; | grep IPAddress显示：        &quot;IPAddress&quot;: &quot;172.17.0.1&quot;,        &quot;SecondaryIPAddresses&quot;: null,2.增加iptables映射iptables -t nat -A DOCKER -p tcp --dport 4430 -j DNAT --to-destination 172.17.0.3:443</span><br></pre></td></tr></table></figure>



<h2 id="四、docker-compose常用命令"><a href="#四、docker-compose常用命令" class="headerlink" title="四、docker-compose常用命令"></a>四、docker-compose常用命令</h2><table>
<thead>
<tr>
<th>docker-compose up -d</th>
<th>创建容器并运行</th>
</tr>
</thead>
<tbody><tr>
<td>docker-compose down</td>
<td>删除容器</td>
</tr>
<tr>
<td>docker-compose start</td>
<td>开始运行</td>
</tr>
<tr>
<td>docker-compose stop</td>
<td>结束运行</td>
</tr>
<tr>
<td>docker-compose images</td>
<td>查看已经安装好的镜像</td>
</tr>
<tr>
<td>docker-compose ps</td>
<td>查看目前compose下面的service</td>
</tr>
<tr>
<td>docker-compose exec  容器名 bash</td>
<td>exec 显示的镜像</td>
</tr>
</tbody></table>
<p>flask 和redis docker-compose 实例 标题上边有源码地址</p>
<blockquote>
<p>Dockerfile 创建容器，docker-compse实现部署</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwd more Dockerfilemore app.py more docker-compose.yml</span><br></pre></td></tr></table></figure>

<p>up 安装组下的容器集合</p>
<blockquote>
<p>默认的yml的文件名称是当前目录下的docker-compose.yml，如果需要指定：<br>docker-compose -f 文件名 up<br>docker-compose up -d 后台运行不显示日志</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwdcurl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://b81aace9.m.daocloud.iosudo docker-compose -f docker-compose.yml up</span><br></pre></td></tr></table></figure>

<p>建议使用docker-compose up -d 后台来运行，如果不后台运行很麻烦ctrl+c的话上边的应用就关闭了。</p>
<h2 id="五、删除容器和镜像"><a href="#五、删除容器和镜像" class="headerlink" title="五、删除容器和镜像"></a>五、删除容器和镜像</h2><p>如果安装出错，要删除所有容器和nacos_config数据库重头再来</p>
<h3 id="5-1、删除容器"><a href="#5-1、删除容器" class="headerlink" title="5.1、删除容器"></a>5.1、删除容器</h3><table>
<thead>
<tr>
<th>docker-compose  ps</th>
<th>查看正在运行的镜像</th>
</tr>
</thead>
<tbody><tr>
<td>docker-compose stop</td>
<td>结束运行</td>
</tr>
<tr>
<td>docker-compose down</td>
<td>删除容器</td>
</tr>
<tr>
<td>docker ps -a</td>
<td>查看运行过的容器</td>
</tr>
</tbody></table>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013720.png"></p>
<h3 id="5-2、删除镜像"><a href="#5-2、删除镜像" class="headerlink" title="5.2、删除镜像"></a>5.2、删除镜像</h3><p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013725.png"></p>
<p>⑴</p>
<table>
<thead>
<tr>
<th>docker images</th>
<th>查看已经安装了的镜像</th>
</tr>
</thead>
<tbody><tr>
<td>docker rmi  [IMAGE ID]</td>
<td>根据镜像ID删除单个镜像</td>
</tr>
<tr>
<td>docker rmi  [IMAGE ID]   [IMAGE ID]    …</td>
<td>根据镜像ID批量删除镜像</td>
</tr>
</tbody></table>
<p>⑵</p>
<table>
<thead>
<tr>
<th>docker ps -a</th>
<th>查看运行过的容器</th>
</tr>
</thead>
<tbody><tr>
<td>docker rm  [IMAGE ID] [IMAGE ID]    …</td>
<td>根据容器ID批量删除容器</td>
</tr>
<tr>
<td>docker rmi  [IMAGE] [IMAGE]   …</td>
<td>根据镜像名称批量删除镜像</td>
</tr>
</tbody></table>
<p>⑶</p>
<table>
<thead>
<tr>
<th>docker ps</th>
<th>查看正在运行的容器</th>
</tr>
</thead>
<tbody><tr>
<td>docker  stop  [CONTAINER ID] [CONTAINER ID]    …</td>
<td>停止正在运行的容器</td>
</tr>
<tr>
<td>docker rm  [CONTAINER ID] [CONTAINER ID]    …</td>
<td>根据容器ID批量删除容器</td>
</tr>
<tr>
<td>docker rmi  [IMAGE] [IMAGE ID]    …</td>
<td>根据镜像名称批量删除镜像</td>
</tr>
</tbody></table>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210718214039.png"></p>
<h3 id="5-3、同时删除对应的文件"><a href="#5-3、同时删除对应的文件" class="headerlink" title="5.3、同时删除对应的文件"></a>5.3、同时删除对应的文件</h3><p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013737.png"></p>
<h3 id="5-4、删除对应数据库"><a href="#5-4、删除对应数据库" class="headerlink" title="5.4、删除对应数据库"></a>5.4、删除对应数据库</h3><p>如果访问不了nacos, 就连同把nacos_config数据库删了重头再来亿遍，会成功的</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013733.png"></p>
<h3 id="5-5、启动镜像"><a href="#5-5、启动镜像" class="headerlink" title="5.5、启动镜像"></a>5.5、启动镜像</h3><p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721020302.png"></p>
<h2 id="六、linux安装和卸载JDK"><a href="#六、linux安装和卸载JDK" class="headerlink" title="六、linux安装和卸载JDK"></a>六、linux安装和卸载JDK</h2><h3 id="6-1、安装JDK"><a href="#6-1、安装JDK" class="headerlink" title="6.1、安装JDK"></a>6.1、安装JDK</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p><font color="orange">从官网上下载linux版本的JDK</font>（<font color="cornflowerblue">jdk-8u172-linux-x64.tar.gz&lt;/</font>）</p>
<p><font color="orange">通过ftp或者rz命令上传到linux</font></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210719230623.png"></p>
<p>我这里需要把JDK安装在/usr/local目录下，在/usr/local下新建文件加java</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">mkdir /usr/local/java</span><br></pre></td></tr></table></figure>

<p>tar命令解压JDK包，解压地址是   <font color="orange">/usr/local/java</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-<span class="number">8</span>u172-linux-x64<span class="selector-class">.tar</span><span class="selector-class">.gz</span> -C /usr/local/java</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdn.net/20180621154736760?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p4X2xpaHVpZnU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
<p>进入安装地址，可以看到有JDK的安装目录</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013751.png"></p>
<p><font color="orange">接下来配置环境变量</font></p>
<p>vi命令打开/etc/profile  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure>

<p><font color="orange">在文件中加入</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#Set</span> Java_Environmentexport JAVA_HOME=/usr/local/java/jdk1.<span class="number">8.0</span>_172export JRE_HOME=/usr/local/java/jdk1.<span class="number">8.0</span>_172/jreexport CLASSPATH=.:$JAVA_HOME/lib$:JRE_HOME/lib:$CLASSPATHexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin/$JAVA_HOME:$PATH</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210721013757.png"></p>
<p><font color="orange"> 加载环境变量</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<p><font color="orange">至此JDK安装完毕</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">判断JDK是否安装成功java -versionjava javac</span><br></pre></td></tr></table></figure>

<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>我这里需要把JDK安装在<font color="orange">/usr/local</font>目录下，在/usr/local下新建文件加java文件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">mkdir /usr/local/java</span><br></pre></td></tr></table></figure>

<p><font color="orange">从华为云下载</font></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">cd /usr/local/javawget https:<span class="comment">//repo.huaweicloud.com/java/jdk/9.0.1+11/jdk-9.0.1_linux-x64_bin.tar.gz</span></span><br></pre></td></tr></table></figure>

<p><font color="orange">解压</font></p>
<p>tar命令解压JDK包，解压地址是   <font color="orange">/usr/local/java</font></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk<span class="number">-9.0</span><span class="number">.1</span>_linux-x64_bin.tar.gz -C /usr/local/java </span><br></pre></td></tr></table></figure>

<p><strong>或者</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-<span class="number">8</span>u172-linux-x64<span class="selector-class">.tar</span><span class="selector-class">.gz</span> -C /usr/local/java</span><br></pre></td></tr></table></figure>

<p><font color="orange">配置JAVA_HOME</font></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210719010759.png"></p>
<p><font color="orange">添加下面内容</font></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#Set Java_Environmentexport JAVA_HOME=/usr/local/jdk-9.0.1export JRE_HOME=/usr/local/jdk-9.0.1/jreexport CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/libexport PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span></span><br></pre></td></tr></table></figure>

<p><strong>或者</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#Set</span> Java_Environmentexport JAVA_HOME=/usr/local/java/jdk1.<span class="number">8.0</span>_172export JRE_HOME=/usr/local/java/jdk1.<span class="number">8.0</span>_172/jreexport CLASSPATH=.:$JAVA_HOME/lib$:JRE_HOME/lib:$CLASSPATHexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin/$JAVA_HOME:$PATH</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210719010847.png"></p>
<p><font color="orange">加载环境变量</font></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<p><font color="orange">验证是否安装成功</font></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p><font color="cornflowerblue">成功！</font></p>
<h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><p>1、下载jdk安装文件<font color="orange">jdk-6u10-linux-i586-rpm.bin</font></p>
<p>2、上传<font color="orange">jdk-6u10-linux-i586-rpm.bin</font>到Linux服务器上，并在shell下执行以下命令</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">chmod <span class="number">755</span> jdk-<span class="number">6</span>u10-linux-i586-rpm<span class="selector-class">.bin</span>./jdk-<span class="number">6</span>u10-linux-i586-rpm<span class="selector-class">.bin</span></span><br></pre></td></tr></table></figure>

<p>这时会有一段Sun的协议，敲几次空格键，当询问是否同意的时候，敲yes就可以了。</p>
<p>程序会自动生成一个<font color="orange">jdk-6u10-linux-i586-rpm.rpm</font>文件，这是主程序包</p>
<p><font color="orange">下面来安装</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">rpm -ivh jdk-<span class="number">6</span>u10-linux-i586-rpm<span class="selector-class">.rpm</span> 		#默认安装在/usr/java中</span><br></pre></td></tr></table></figure>

<p><strong>3、设置环境变量（</strong><font color="orange">.bashrc</font>文件）：</p>
<p>修改用户主目录中的.bashrc文件，添加jdk环境变量。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">vim <span class="selector-class">.bashrc</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#Set Java_Environment  set JAVA_HOME=/usr/javaexport JAVA_HOMEG1N%P o:z3CF^A0setPATH=$PATH:$JAVA_HOME/binexport PATHset CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport CLASSPATH</span><br></pre></td></tr></table></figure>

<p><font color="orange">加载环境变量</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">source /<span class="selector-class">.bashrc</span></span><br></pre></td></tr></table></figure>

<p>当然也可以通过<strong>更改</strong><font color="orange">/etc/profile</font>来实现，但是<font color="red">不推荐</font>这么做，因为这样的设置将对所有用户的shell都生效，对系统安全会产生影响。下面来验证一下变量设置是否生效（在验证前先logout一下，再重新登陆）。如果要使某个用户具有运行java命令的权限，只要修改其bash初始化文件即可。</p>
<h4 id="vi-etc-profile"><a href="#vi-etc-profile" class="headerlink" title="vi /etc/profile"></a>vi /etc/profile</h4><p><font color="orange">中的内容可以这样添加</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>选<span class="number">1</span>：<span class="number">1</span>、<span class="selector-id">#Set</span> Java_Environmentexport JAVA_HOME=/usr/local/jdk-<span class="number">9.0</span>.<span class="number">1ex</span>port JRE_HOME=/usr/local/jdk-<span class="number">9.0</span>.<span class="number">1</span>/jreexport CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/libexport PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin  <span class="number">2</span>、#Set Java_EnvironmentJAVA_HOME=/usr/local/java/jdk-<span class="number">9.0</span>.<span class="number">1</span>JRE_HOME=/usr/local/java/jdk-<span class="number">9.0</span>.<span class="number">1</span>/jrePATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binCLASSPATH=.:$JAVA_HOME/lib/jt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libexport JAVA_HOME JRE_HOME PATH CLASSPATH  <span class="number">3</span>、#Set Java_Environment  export JAVA_HOME=/usr/local/java/jdk-<span class="number">9.0</span>.<span class="number">1ex</span>port JRE_HOME=/usr/local/java/jdk-<span class="number">9.0</span>.<span class="number">1</span>/jreexport CLASSPATH=.:$JAVA_HOME/lib$:JRE_HOME/lib:$CLASSPATHexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin/$JAVA_HOME:$PATH</span><br></pre></td></tr></table></figure>

<h3 id="6-2、卸载JDK"><a href="#6-2、卸载JDK" class="headerlink" title="6.2、卸载JDK"></a>6.2、卸载JDK</h3><h4 id="方法一（推荐）"><a href="#方法一（推荐）" class="headerlink" title="方法一（推荐）"></a>方法一（推荐）</h4><p><font color="orange">判断jdk是否安装(显示版本号等信息，说明已经安装)</font></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">java -versionjavajavac</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">which java		查看JDK的安装路径 </span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210719224324.png"></p>
<p><font color="orange">rm -rf JDK地址（卸载JDK） </font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">rm -rf /usr/local/java/jdk-<span class="number">9.0</span>.<span class="number">1</span>/</span><br></pre></td></tr></table></figure>

<p><font color="orange">查看是否卸载完毕</font></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">java -versionjavajavac</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210719234118.png"></p>
<p><font color="orange">vi命令编辑文件profile </font></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210719224702.png"></p>
<p><font color="red">删除配置的环境变量</font></p>
<p><font color="red">删除用户主目录中</font>（<font color="orange">/root</font>）的<font color="orange">.bashrc</font>文件中配置的<font color="red">jdk环境变量</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">vim <span class="selector-class">.bashrc</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#Set Java_Environment  set JAVA_HOME=/usr/javaexport JAVA_HOMEG1N%P o:z3CF^A0setPATH=$PATH:$JAVA_HOME/binexport PATHset CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport CLASSPATH</span><br></pre></td></tr></table></figure>

<p><font color="red">至此JDK卸载完毕</font></p>
<h4 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h4><p><font color="orange">卸载默认的JDK：</font></p>
<p>用root用户登录到系统，打开一个终端输入</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep</span><br></pre></td></tr></table></figure>

<p>显示内容其中包含以下两行信息</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">java-<span class="number">1.4</span>.<span class="number">2</span>-gcj-compat-<span class="number">1.4</span>.<span class="number">2.0</span>java-<span class="number">1.4</span>.<span class="number">2</span>-gcj-compat-devel-l.<span class="number">4.2</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><font color="red">开始卸载jdk</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">rpm -e java-<span class="number">1.4</span>.<span class="number">2</span>-gcj-compat-<span class="number">1.4</span>.<span class="number">2.0</span>rpm -e java-<span class="number">1.4</span>.<span class="number">2</span>-gcj-compat-devel-l.<span class="number">4.2</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>卸载其他自己安装的jdk直接使用<font color="red">rpm -e java-xxxx</font>即</p>
]]></content>
      <tags>
        <tag>docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql系列</title>
    <url>/2019/01/25/Mysql%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h2 id="初识MySQL"><a href="#初识MySQL" class="headerlink" title="初识MySQL"></a>初识MySQL</h2><blockquote>
<p>为什么学习数据库</p>
</blockquote>
<p>1、岗位技能需求</p>
<p>2、现在的世界,得数据者得天下</p>
<p>3、存储数据的方法</p>
<p>4、程序,网站中,大量数据如何长久保存?</p>
<p>5、数据库是几乎软件体系中最核心的一个存在。</p>
<blockquote>
<p>什么是数据库</p>
</blockquote>
<p>数据库 ( <strong>DataBase</strong> , 简称<strong>DB</strong> )</p>
<p><strong>概念</strong> : 长期存放在计算机内,有组织,可共享的大量数据的集合,是一个数据 “仓库”</p>
<p><strong>作用</strong> : 保存,并能安全管理数据(如:增删改查等),减少冗余…</p>
<p><strong>数据库总览 :</strong></p>
<ul>
<li><p>关系型数据库 ( SQL )</p>
</li>
<li><ul>
<li>MySQL , Oracle , SQL Server , SQLite , DB2 , …</li>
<li>关系型数据库通过外键关联来建立表与表之间的关系</li>
</ul>
</li>
<li><p>非关系型数据库 ( NOSQL )</p>
</li>
<li><ul>
<li>Redis , MongoDB , …</li>
<li>非关系型数据库通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定</li>
</ul>
</li>
</ul>
<blockquote>
<p>什么是DBMS</p>
</blockquote>
<p>数据库管理系统 ( <strong>D</strong>ata<strong>B</strong>ase <strong>M</strong>anagement <strong>S</strong>ystem )</p>
<p>数据库管理软件 , 科学组织和存储数据 , 高效地获取和维护数据</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210725215134.png"></p>
<p>为什么要说这个呢?</p>
<p>因为我们要学习的MySQL应该算是一个数据库管理系统.</p>
<blockquote>
<p>MySQL简介</p>
</blockquote>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210725222343.png"></p>
<p><strong>概念 :</strong> 是现在<strong>流行</strong>的<strong>开源</strong>的,<strong>免费</strong>的 <strong>关系型</strong>数据库</p>
<p><strong>历史 :</strong> 由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。</p>
<p><strong>特点 :</strong> </p>
<ul>
<li>免费 , 开源数据库</li>
<li>小巧 , 功能齐全</li>
<li>使用便捷</li>
<li>可运行于Windows或Linux操作系统</li>
<li>可适用于中小型甚至大型网站应用</li>
</ul>
<p><strong>官网 :</strong> <strong><span class="exturl" data-url="aHR0cHM6Ly93d3cubXlzcWwuY29tLw==">https://www.mysql.com/<i class="fa fa-external-link-alt"></i></span></strong></p>
<blockquote>
<p>安装MySQL</p>
</blockquote>
<p><strong>这里建议大家使用压缩版,安装快,方便.不复杂.</strong></p>
<p><strong>软件下载</strong></p>
<p>mysql5.7 64位下载地址:</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2dldC9Eb3dubG9hZHMvTXlTUUwtNS43L215c3FsLTUuNy4xOS13aW54NjQuemlw">https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.19-winx64.zip<i class="fa fa-external-link-alt"></i></span></p>
<p>电脑是64位的就下载使用64位版本的！</p>
<blockquote>
<p>安装步骤</p>
</blockquote>
<p>1、下载后得到zip压缩包.</p>
<p>2、解压到自己想要安装到的目录，本人解压到的是D:\Environment\mysql-5.7.19</p>
<p>3、添加环境变量：我的电脑-&gt;属性-&gt;高级-&gt;环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择PATH,在其后面添加: 你的mysql 安装文件下面的bin文件夹</span><br></pre></td></tr></table></figure>

<p>4、编辑 my.ini 文件 ,注意替换路径位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">basedir=D:\Program Files\mysql-5.7\</span><br><span class="line">datadir=D:\Program Files\mysql-5.7\data\</span><br><span class="line">port=3306</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure>

<p>5、启动管理员模式下的CMD，并将路径切换至mysql下的bin目录，然后输入mysqld –install (安装mysql)</p>
<p>6、再输入  mysqld –initialize-insecure –user=mysql 初始化数据文件</p>
<p>7、然后再次启动mysql 然后用命令 mysql –u root –p 进入mysql管理界面（密码可为空）</p>
<p>8、进入界面后更改root密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update mysql.user set authentication_string=password(&#x27;123456&#x27;) where user=&#x27;root&#x27;and Host = &#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<p>9、刷新权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<p>10、修改 my.ini文件删除最后一句skip-grant-tables</p>
<p>11、重启mysql即可正常使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net stop mysql</span><br><span class="line">net start mysql</span><br></pre></td></tr></table></figure>

<p>12、连接上测试出现以下结果就安装好了</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210725215301.png"></p>
<p>一步步去做 , 理论上是没有任何问题的 .</p>
<p>如果您以前装过,现在需要重装,一定要将环境清理干净 .</p>
<p>好了,到这里大家都装好了,因为刚接触,所以我们先不学习命令.</p>
<p>这里给大家推荐一个工具 : <strong>SQLyog</strong> .</p>
<p>即便有了可视化工具,可是基本的DOS命名大家还是要记住!</p>
<blockquote>
<p>SQLyog</p>
</blockquote>
<p>可手动操作,管理MySQL数据库的软件工具</p>
<p>特点 : 简洁 , 易用 , 图形化</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210725215320.png"></p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210725215341.png"></p>
<p>使用SQLyog管理工具自己完成以下操作 :</p>
<ul>
<li><p>连接本地MySQL数据库</p>
</li>
<li><p>新建MySchool数据库</p>
</li>
<li><ul>
<li>字段</li>
<li>GradeID : int(11) , Primary Key (pk)</li>
<li>GradeName : varchar(50)</li>
<li>数据库名称MySchool</li>
<li>新建数据库表(grade)</li>
</ul>
</li>
</ul>
<p>在历史记录中可以看到相对应的数据库操作的语句 .</p>
<blockquote>
<p>连接数据库</p>
</blockquote>
<p>打开MySQL命令窗口</p>
<ul>
<li>在DOS命令行窗口进入 <strong>安装目录\mysql\bin</strong></li>
<li>可设置环境变量，设置了环境变量，可以在任意目录打开！</li>
</ul>
<p><strong>连接数据库语句 :</strong> mysql -h 服务器主机地址 -u 用户名 -p 用户密码</p>
<p>注意 : -p后面不能加空格,否则会被当做密码的内容,导致登录失败 !</p>
<p><strong>几个基本的数据库操作命令 :</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update user set password=password(&#x27;123456&#x27;)where user=&#x27;root&#x27;; 修改密码</span><br><span class="line">flush privileges; 刷新数据库</span><br><span class="line">show databases; 显示所有数据库</span><br><span class="line">use dbname；打开某个数据库</span><br><span class="line">show tables; 显示数据库mysql中所有的表</span><br><span class="line">describe user; 显示表mysql数据库中user表的列信息</span><br><span class="line">create database name; 创建数据库</span><br><span class="line">use databasename; 选择数据库</span><br><span class="line"></span><br><span class="line">exit; 退出Mysql</span><br><span class="line">? 命令关键词 : 寻求帮助</span><br><span class="line">-- 表示注释</span><br></pre></td></tr></table></figure>

<h2 id="MySQL02：数据库操作"><a href="#MySQL02：数据库操作" class="headerlink" title="MySQL02：数据库操作"></a>MySQL02：数据库操作</h2><p><strong><font color="red">数据库操作</font></strong></p>
<h3 id="结构化查询语句分类"><a href="#结构化查询语句分类" class="headerlink" title="结构化查询语句分类"></a>结构化查询语句分类</h3><p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210725215450.png"></p>
<h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><blockquote>
<p>命令行操作数据库</p>
</blockquote>
<p>创建数据库 :  create database [if not exists] 数据库名;</p>
<p>删除数据库 : drop database [if exists] 数据库名;</p>
<p>查看数据库 : show databases;</p>
<p>使用数据库 : use 数据库名;</p>
<blockquote>
<p>对比工具操作数据库</p>
</blockquote>
<p><strong>学习方法：</strong></p>
<ul>
<li>对照SQLyog工具自动生成的语句学习</li>
<li>固定语法中的单词需要记忆</li>
<li><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210725215509.png"></li>
</ul>
<h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><p>属于DDL的一种，语法 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table [if not exists] `表名`(</span><br><span class="line">   &#x27;字段名1&#x27; 列类型 [属性][索引][注释],</span><br><span class="line">   &#x27;字段名2&#x27; 列类型 [属性][索引][注释],</span><br><span class="line">  #...</span><br><span class="line">   &#x27;字段名n&#x27; 列类型 [属性][索引][注释]</span><br><span class="line">)[表类型][表字符集][注释];</span><br></pre></td></tr></table></figure>

<p><strong>说明 :</strong> 反引号用于区别MySQL保留字与普通字符而引入的 (键盘esc下面的键).</p>
<h3 id="数据值和列类型"><a href="#数据值和列类型" class="headerlink" title="数据值和列类型"></a>数据值和列类型</h3><p>列类型 : 规定数据库中该列存放的数据类型</p>
<blockquote>
<p>数值类型</p>
</blockquote>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210725215545.png"></p>
<blockquote>
<p>字符串类型</p>
</blockquote>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210725215559.png"></p>
<blockquote>
<p>日期和时间型数值类型</p>
</blockquote>
<p><img src="/.io//gif;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVQImWNgYGBgAAAABQABh6FO1AAAAABJRU5ErkJggg==" alt="图片"></p>
<blockquote>
<p>NULL值</p>
</blockquote>
<ul>
<li>理解为 “没有值” 或 “未知值”</li>
<li>不要用NULL进行算术运算 , 结果仍为NULL</li>
</ul>
<h3 id="数据字段属性"><a href="#数据字段属性" class="headerlink" title="数据字段属性"></a>数据字段属性</h3><p><strong>UnSigned</strong></p>
<ul>
<li>无符号的</li>
<li>声明该数据列不允许负数 .</li>
</ul>
<p><strong>ZEROFILL</strong></p>
<ul>
<li>0填充的</li>
<li>不足位数的用0来填充 , 如int(3),5则为005</li>
</ul>
<p><strong>Auto_InCrement</strong></p>
<ul>
<li><p>自动增长的 , 每添加一条数据 , 自动在上一个记录数上加 1(默认)</p>
</li>
<li><p>通常用于设置<strong>主键</strong> , 且为整数类型</p>
</li>
<li><p>可定义起始值和步长</p>
</li>
<li><ul>
<li>当前表设置步长(AUTO_INCREMENT=100) : 只影响当前表</li>
<li>SET @@auto_increment_increment=5 ; 影响所有使用自增的表(全局)</li>
</ul>
</li>
</ul>
<p><strong>NULL 和 NOT NULL</strong></p>
<ul>
<li>默认为NULL , 即没有插入该列的数值</li>
<li>如果设置为NOT NULL , 则该列必须有值</li>
</ul>
<p><strong>DEFAULT</strong></p>
<ul>
<li>默认的</li>
<li>用于设置默认值</li>
<li>例如,性别字段,默认为”男” , 否则为 “女” ; 若无指定该列的值 , 则默认值为”男”的值</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 目标 : 创建一个school数据库</span><br><span class="line">-- 创建学生表(列,字段)</span><br><span class="line">-- 学号int 登录密码varchar(20) 姓名,性别varchar(2),出生日期(datatime),家庭住址,email</span><br><span class="line">-- 创建表之前 , 一定要先选择数据库</span><br><span class="line"></span><br><span class="line">CREATE TABLE IF NOT EXISTS `student` (</span><br><span class="line">`id` int(4) NOT NULL AUTO_INCREMENT COMMENT &#x27;学号&#x27;,</span><br><span class="line">`name` varchar(30) NOT NULL DEFAULT &#x27;匿名&#x27; COMMENT &#x27;姓名&#x27;,</span><br><span class="line">`pwd` varchar(20) NOT NULL DEFAULT &#x27;123456&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class="line">`sex` varchar(2) NOT NULL DEFAULT &#x27;男&#x27; COMMENT &#x27;性别&#x27;,</span><br><span class="line">`birthday` datetime DEFAULT NULL COMMENT &#x27;生日&#x27;,</span><br><span class="line">`address` varchar(100) DEFAULT NULL COMMENT &#x27;地址&#x27;,</span><br><span class="line">`email` varchar(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">-- 查看数据库的定义</span><br><span class="line">SHOW CREATE DATABASE school;</span><br><span class="line">-- 查看数据表的定义</span><br><span class="line">SHOW CREATE TABLE student;</span><br><span class="line">-- 显示表结构</span><br><span class="line">DESC student;  -- 设置严格检查模式(不能容错了)SET sql_mode=&#x27;STRICT_TRANS_TABLES&#x27;;</span><br></pre></td></tr></table></figure>



<h3 id="数据表的类型"><a href="#数据表的类型" class="headerlink" title="数据表的类型"></a>数据表的类型</h3><blockquote>
<p>设置数据表的类型</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">   -- 省略一些代码</span><br><span class="line">   -- Mysql注释</span><br><span class="line">   -- 1. # 单行注释</span><br><span class="line">   -- 2. /*...*/ 多行注释</span><br><span class="line">)ENGINE = MyISAM (or InnoDB)</span><br><span class="line"></span><br><span class="line">-- 查看mysql所支持的引擎类型 (表类型)</span><br><span class="line">SHOW ENGINES;</span><br></pre></td></tr></table></figure>

<p>MySQL的数据表的类型 : <strong>MyISAM</strong> , <strong>InnoDB</strong> , HEAP , BOB , CSV等…</p>
<p>常见的 MyISAM 与 InnoDB 类型：</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210725215621.png"></p>
<p>经验 ( 适用场合 )  :</p>
<ul>
<li>适用 MyISAM : 节约空间及相应速度</li>
<li>适用 InnoDB : 安全性 , 事务处理及多用户操作数据表</li>
</ul>
<blockquote>
<p>数据表的存储位置</p>
</blockquote>
<ul>
<li><p>MySQL数据表以文件方式存放在磁盘中</p>
</li>
<li><ul>
<li>包括表文件 , 数据文件 , 以及数据库的选项文件</li>
<li>位置 : Mysql安装目录\data\下存放数据表 . 目录名对应数据库名 , 该目录下文件名对应数据表 .</li>
</ul>
</li>
<li><p>注意 :</p>
</li>
<li><ul>
<li><p>* . frm – 表结构定义文件</p>
</li>
<li><p>* . MYD – 数据文件 ( data )</p>
</li>
<li><p>* . MYI – 索引文件 ( index )</p>
</li>
<li><p>InnoDB类型数据表只有一个 *.frm文件 , 以及上一级目录的ibdata1文件</p>
</li>
<li><p>MyISAM类型数据表对应三个文件 :</p>
<p><img src="/.io//gif;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVQImWNgYGBgAAAABQABh6FO1AAAAABJRU5ErkJggg==" alt="图片"></p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>设置数据表字符集</p>
</blockquote>
<p>我们可为数据库,数据表,数据列设定不同的字符集，设定方法 :</p>
<ul>
<li>创建时通过命令来设置 , 如 : CREATE TABLE 表名()CHARSET = utf8;</li>
<li>如无设定 , 则根据MySQL数据库配置文件 my.ini 中的参数设定</li>
</ul>
<h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><blockquote>
<p>修改表 ( ALTER TABLE )</p>
</blockquote>
<p>修改表名 :ALTER TABLE 旧表名 RENAME AS 新表名</p>
<p>添加字段 : ALTER TABLE 表名 ADD字段名 列属性[属性]</p>
<p>修改字段 :</p>
<ul>
<li>ALTER TABLE 表名 MODIFY 字段名 列类型[属性]</li>
<li>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 列属性[属性]</li>
</ul>
<p>删除字段 :  ALTER TABLE 表名 DROP 字段名</p>
<blockquote>
<p>删除数据表</p>
</blockquote>
<p>语法：DROP TABLE [IF EXISTS] 表名</p>
<ul>
<li>IF EXISTS为可选 , 判断是否存在该数据表</li>
<li>如删除不存在的数据表会抛出错误</li>
</ul>
<blockquote>
<p>其他</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！</span><br><span class="line"></span><br><span class="line">2. 每个库目录存在一个保存当前数据库的选项文件db.opt。</span><br><span class="line"></span><br><span class="line">3. 注释：</span><br><span class="line">  单行注释 # 注释内容</span><br><span class="line">  多行注释 /* 注释内容 */</span><br><span class="line">  单行注释 -- 注释内容       (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)</span><br><span class="line">   </span><br><span class="line">4. 模式通配符：</span><br><span class="line">  _   任意单个字符</span><br><span class="line">  %   任意多个字符，甚至包括零字符</span><br><span class="line">  单引号需要进行转义 \&#x27;</span><br><span class="line">   </span><br><span class="line">5. CMD命令行内的语句结束符可以为 &quot;;&quot;, &quot;\G&quot;, &quot;\g&quot;，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。</span><br><span class="line"></span><br><span class="line">6. SQL对大小写不敏感 （关键字）</span><br><span class="line"></span><br><span class="line">7. 清除已有语句：\c</span><br></pre></td></tr></table></figure>

<h2 id="MySQL03：DML语言"><a href="#MySQL03：DML语言" class="headerlink" title="MySQL03：DML语言"></a>MySQL03：DML语言</h2><p><strong><font color="red">MySQL数据管理</font></strong></p>
<h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><blockquote>
<p>外键概念</p>
</blockquote>
<p>如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键。由此可见，外键表示了两个关系之间的相关联系。以另一个关系的外键作主关键字的表被称为<strong>主表</strong>，具有此外键的表被称为主表的<strong>从表</strong>。</p>
<p>在实际操作中，将一个表的值放入第二个表来表示关联，所使用的值是第一个表的主键值(在必要时可包括复合主键值)。此时，第二个表中保存这些值的属性称为外键(<strong>foreign key</strong>)。</p>
<p><strong>外键作用</strong></p>
<p>保持数据<strong>一致性</strong>，<strong>完整性</strong>，主要目的是控制存储在外键表中的数据,<strong>约束</strong>。使两张表形成关联，外键只能引用外表中的列的值或使用空值。</p>
<blockquote>
<p>创建外键</p>
</blockquote>
<p>建表时指定外键约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建外键的方式一 : 创建子表同时创建外键</span><br><span class="line"></span><br><span class="line">-- 年级表 (id\年级名称)</span><br><span class="line">CREATE TABLE `grade` (</span><br><span class="line">`gradeid` INT(10) NOT NULL AUTO_INCREMENT COMMENT &#x27;年级ID&#x27;,</span><br><span class="line">`gradename` VARCHAR(50) NOT NULL COMMENT &#x27;年级名称&#x27;,</span><br><span class="line">PRIMARY KEY (`gradeid`)</span><br><span class="line">) ENGINE=INNODB DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">-- 学生信息表 (学号,姓名,性别,年级,手机,地址,出生日期,邮箱,身份证号)</span><br><span class="line">CREATE TABLE `student` (</span><br><span class="line">`studentno` INT(4) NOT NULL COMMENT &#x27;学号&#x27;,</span><br><span class="line">`studentname` VARCHAR(20) NOT NULL DEFAULT &#x27;匿名&#x27; COMMENT &#x27;姓名&#x27;,</span><br><span class="line">`sex` TINYINT(1) DEFAULT &#x27;1&#x27; COMMENT &#x27;性别&#x27;,</span><br><span class="line">`gradeid` INT(10) DEFAULT NULL COMMENT &#x27;年级&#x27;,</span><br><span class="line">`phoneNum` VARCHAR(50) NOT NULL COMMENT &#x27;手机&#x27;,</span><br><span class="line">`address` VARCHAR(255) DEFAULT NULL COMMENT &#x27;地址&#x27;,</span><br><span class="line">`borndate` DATETIME DEFAULT NULL COMMENT &#x27;生日&#x27;,</span><br><span class="line">`email` VARCHAR(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">`idCard` VARCHAR(18) DEFAULT NULL COMMENT &#x27;身份证号&#x27;,</span><br><span class="line">PRIMARY KEY (`studentno`),</span><br><span class="line">KEY `FK_gradeid` (`gradeid`),</span><br><span class="line">CONSTRAINT `FK_gradeid` FOREIGN KEY (`gradeid`) REFERENCES `grade` (`gradeid`)</span><br><span class="line">) ENGINE=INNODB DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure>

<p>建表后修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建外键方式二 : 创建子表完毕后,修改子表添加外键</span><br><span class="line">ALTER TABLE `student`</span><br><span class="line">ADD CONSTRAINT `FK_gradeid` FOREIGN KEY (`gradeid`) REFERENCES `grade` (`gradeid`);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>删除外键</p>
</blockquote>
<p>操作：删除 grade 表，发现报错</p>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210725215644.png"></p>
<p><strong>注意</strong> : 删除具有主外键关系的表时 , 要先删子表 , 后删主表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 删除外键</span><br><span class="line">ALTER TABLE student DROP FOREIGN KEY FK_gradeid;</span><br><span class="line">-- 发现执行完上面的,索引还在,所以还要删除索引</span><br><span class="line">-- 注:这个索引是建立外键的时候默认生成的</span><br><span class="line">ALTER TABLE student DROP INDEX FK_gradeid;</span><br></pre></td></tr></table></figure>



<h3 id="DML语言"><a href="#DML语言" class="headerlink" title="DML语言"></a>DML语言</h3><p><strong>数据库意义</strong> ： 数据存储、数据管理</p>
<p><strong>管理数据库数据方法：</strong></p>
<ul>
<li>通过SQLyog等管理工具管理数据库数据</li>
<li>通过<strong>DML语句</strong>管理数据库数据</li>
</ul>
<p><strong>DML语言</strong>  ：数据操作语言</p>
<ul>
<li><p>用于操作数据库对象中所包含的数据</p>
</li>
<li><p>包括 :</p>
</li>
<li><ul>
<li>INSERT (添加数据语句)</li>
<li>UPDATE (更新数据语句)</li>
<li>DELETE (删除数据语句)</li>
</ul>
</li>
</ul>
<h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><blockquote>
<p>INSERT命令</p>
</blockquote>
<p><strong>语法：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO 表名[(字段1,字段2,字段3,...)] VALUES(&#x27;值1&#x27;,&#x27;值2&#x27;,&#x27;值3&#x27;)</span><br></pre></td></tr></table></figure>

<p><strong>注意 :</strong> </p>
<ul>
<li>字段或值之间用英文逗号隔开 .</li>
<li>‘ 字段1,字段2…’ 该部分可省略 , 但添加的值务必与表结构,数据列,顺序相对应,且数量一致 .</li>
<li>可同时插入多条数据 , values 后用英文逗号隔开 .</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 使用语句如何增加语句?</span><br><span class="line">-- 语法 : INSERT INTO 表名[(字段1,字段2,字段3,...)] VALUES(&#x27;值1&#x27;,&#x27;值2&#x27;,&#x27;值3&#x27;)</span><br><span class="line">INSERT INTO grade(gradename) VALUES (&#x27;大一&#x27;);</span><br><span class="line"></span><br><span class="line">-- 主键自增,那能否省略呢?</span><br><span class="line">INSERT INTO grade VALUES (&#x27;大二&#x27;);</span><br><span class="line"></span><br><span class="line">-- 查询:INSERT INTO grade VALUE (&#x27;大二&#x27;)错误代码：1136</span><br><span class="line">Column count doesn`t match value count at row 1</span><br><span class="line"></span><br><span class="line">-- 结论:&#x27;字段1,字段2...&#x27;该部分可省略 , 但添加的值务必与表结构,数据列,顺序相对应,且数量一致.</span><br><span class="line"></span><br><span class="line">-- 一次插入多条数据</span><br><span class="line">INSERT INTO grade(gradename) VALUES (&#x27;大三&#x27;),(&#x27;大四&#x27;);</span><br></pre></td></tr></table></figure>

<p><strong>练习题目</strong> </p>
<p>自己使用INSERT语句为课程表subject添加数据 . 使用到外键.</p>
<h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><blockquote>
<p>update命令</p>
</blockquote>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE 表名 SET column_name=value [,column_name2=value2,...] [WHEREcondition];</span><br></pre></td></tr></table></figure>

<p><strong>注意 :</strong> </p>
<ul>
<li>column_name 为要更改的数据列</li>
<li>value 为修改后的数据 , 可以为变量 , 具体指 , 表达式或者嵌套的SELECT结果</li>
<li>condition 为筛选条件 , 如不指定则修改该表的所有列数据</li>
</ul>
<blockquote>
<p>where条件子句</p>
</blockquote>
<p>可以简单的理解为 : 有条件地从表中筛选数据</p>
<p><img src="/.io//gif;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVQImWNgYGBgAAAABQABh6FO1AAAAABJRU5ErkJggg==" alt="图片">测试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 修改年级信息</span><br><span class="line">UPDATE grade SET gradename = &#x27;高中&#x27; WHERE gradeid = 1;</span><br></pre></td></tr></table></figure>



<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><blockquote>
<p>DELETE命令</p>
</blockquote>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM 表名 [WHERE condition];</span><br></pre></td></tr></table></figure>

<p>注意：condition为筛选条件 , 如不指定则删除该表的所有列数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 删除最后一个数据</span><br><span class="line">DELETE FROM grade WHERE gradeid = 5</span><br></pre></td></tr></table></figure>



<blockquote>
<p>TRUNCATE命令</p>
</blockquote>
<p>作用：用于完全清空表数据 , 但表结构 , 索引 , 约束等不变 ;</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRUNCATE [TABLE] table_name;</span><br><span class="line"></span><br><span class="line">-- 清空年级表</span><br><span class="line">TRUNCATE grade</span><br></pre></td></tr></table></figure>

<p><strong>注意：区别于DELETE命令</strong></p>
<ul>
<li><p>相同 : 都能删除数据 , 不删除表结构 , 但TRUNCATE速度更快</p>
</li>
<li><p>不同 :</p>
</li>
<li><ul>
<li>使用TRUNCATE TABLE 重新设置AUTO_INCREMENT计数器</li>
<li>使用TRUNCATE TABLE不会对事务有影响 （事务后面会说）</li>
</ul>
</li>
</ul>
<p>测试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建一个测试表</span><br><span class="line">CREATE TABLE `test` (</span><br><span class="line">`id` INT(4) NOT NULL AUTO_INCREMENT,</span><br><span class="line">`coll` VARCHAR(20) NOT NULL,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=INNODB DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">-- 插入几个测试数据</span><br><span class="line">INSERT INTO test(coll) VALUES(&#x27;row1&#x27;),(&#x27;row2&#x27;),(&#x27;row3&#x27;);</span><br><span class="line"></span><br><span class="line">-- 删除表数据(不带where条件的delete)</span><br><span class="line">DELETE FROM test;</span><br><span class="line">-- 结论:如不指定Where则删除该表的所有列数据,自增当前值依然从原来基础上进行,会记录日志.</span><br><span class="line"></span><br><span class="line">-- 删除表数据(truncate)</span><br><span class="line">TRUNCATE TABLE test;</span><br><span class="line">-- 结论:truncate删除数据,自增当前值会恢复到初始值重新开始;不会记录日志.</span><br><span class="line"></span><br><span class="line">-- 同样使用DELETE清空不同引擎的数据库表数据.重启数据库服务后</span><br><span class="line">-- InnoDB : 自增列从初始值重新开始 (因为是存储在内存中,断电即失)</span><br><span class="line">-- MyISAM : 自增列依然从上一个自增数据基础上开始 (存在文件中,不会丢失)</span><br></pre></td></tr></table></figure>

<h2 id="MySQL04：使用DQL查询数据"><a href="#MySQL04：使用DQL查询数据" class="headerlink" title="MySQL04：使用DQL查询数据"></a>MySQL04：使用DQL查询数据</h2><p>使用DQL查询数据</p>
<h3 id="DQL语言"><a href="#DQL语言" class="headerlink" title="DQL语言"></a>DQL语言</h3><p><strong>DQL( Data Query Language 数据查询语言 )</strong></p>
<ul>
<li>查询数据库数据 , 如<strong>SELECT</strong>语句</li>
<li>简单的单表查询或多表的复杂查询和嵌套查询</li>
<li>是数据库语言中最核心,最重要的语句</li>
<li>使用频率最高的语句</li>
</ul>
<blockquote>
<p>SELECT语法</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT [ALL | DISTINCT]</span><br><span class="line">&#123;* | table.* | [table.field1[as alias1][,table.field2[as alias2]][,...]]&#125;</span><br><span class="line">FROM table_name [as table_alias]</span><br><span class="line">  [left | right | inner join table_name2]  -- 联合查询</span><br><span class="line">  [WHERE ...]  -- 指定结果需满足的条件</span><br><span class="line">  [GROUP BY ...]  -- 指定结果按照哪几个字段来分组</span><br><span class="line">  [HAVING]  -- 过滤分组的记录必须满足的次要条件</span><br><span class="line">  [ORDER BY ...]  -- 指定查询记录按一个或多个条件排序</span><br><span class="line">  [LIMIT &#123;[offset,]row_count | row_countOFFSET offset&#125;];</span><br><span class="line">   -- 指定查询的记录从哪条至哪条</span><br></pre></td></tr></table></figure>

<p><strong>注意 : [ ] 括号代表可选的 , { }括号代表必选得</strong></p>
<h3 id="指定查询字段"><a href="#指定查询字段" class="headerlink" title="指定查询字段"></a>指定查询字段</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询表中所有的数据列结果 , 采用 **&quot; \* &quot;** 符号; 但是效率低，不推荐 .</span><br><span class="line"></span><br><span class="line">-- 查询所有学生信息</span><br><span class="line">SELECT * FROM student;</span><br><span class="line"></span><br><span class="line">-- 查询指定列(学号 , 姓名)</span><br><span class="line">SELECT studentno,studentname FROM student;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>AS 子句作为别名</p>
</blockquote>
<p>作用：</p>
<ul>
<li>可给数据列取一个新别名</li>
<li>可给表取一个新别名</li>
<li>可把经计算或总结的结果用另一个新名称来代替</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 这里是为列取别名(当然as关键词可以省略)</span><br><span class="line">SELECT studentno AS 学号,studentname AS 姓名 FROM student;</span><br><span class="line"></span><br><span class="line">-- 使用as也可以为表取别名</span><br><span class="line">SELECT studentno AS 学号,studentname AS 姓名 FROM student AS s;</span><br><span class="line"></span><br><span class="line">-- 使用as,为查询结果取一个新名字</span><br><span class="line">-- CONCAT()函数拼接字符串</span><br><span class="line">SELECT CONCAT(&#x27;姓名:&#x27;,studentname) AS 新姓名 FROM student;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>DISTINCT关键字的使用</p>
</blockquote>
<p>作用 : 去掉SELECT查询返回的记录结果中重复的记录 ( 返回所有列的值都相同 ) , 只返回一条</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- # 查看哪些同学参加了考试(学号) 去除重复项</span><br><span class="line">SELECT * FROM result; -- 查看考试成绩</span><br><span class="line">SELECT studentno FROM result; -- 查看哪些同学参加了考试</span><br><span class="line">SELECT DISTINCT studentno FROM result; -- 了解:DISTINCT 去除重复项 , (默认是ALL)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>使用表达式的列</p>
</blockquote>
<p>数据库中的表达式 : 一般由文本值 , 列值 , NULL , 函数和操作符等组成</p>
<p>应用场景 :</p>
<ul>
<li><p>SELECT语句返回结果列中使用</p>
</li>
<li><p>SELECT语句中的ORDER BY , HAVING等子句中使用</p>
</li>
<li><p>DML语句中的 where 条件语句中使用表达式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- selcet查询中可以使用表达式</span><br><span class="line">SELECT @@auto_increment_increment; -- 查询自增步长</span><br><span class="line">SELECT VERSION(); -- 查询版本号</span><br><span class="line">SELECT 100*3-1 AS 计算结果; -- 表达式</span><br><span class="line"></span><br><span class="line">-- 学员考试成绩集体提分一分查看</span><br><span class="line">SELECT studentno,StudentResult+1 AS &#x27;提分后&#x27; FROM result;</span><br></pre></td></tr></table></figure></li>
<li><p>避免SQL返回结果中包含 ‘ . ‘ , ‘ * ‘ 和括号等干扰开发语言程序.</p>
</li>
</ul>
<h3 id="where条件语句"><a href="#where条件语句" class="headerlink" title="where条件语句"></a>where条件语句</h3><p>作用：用于检索数据表中 符合条件 的记录</p>
<p>搜索条件可由一个或多个逻辑表达式组成 , 结果一般为真或假.</p>
<blockquote>
<p>逻辑操作符</p>
</blockquote>
<p><img src="/.io//gif;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVQImWNgYGBgAAAABQABh6FO1AAAAABJRU5ErkJggg==" alt="图片"></p>
<p>测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 满足条件的查询(where)</span><br><span class="line">SELECT Studentno,StudentResult FROM result;</span><br><span class="line"></span><br><span class="line">-- 查询考试成绩在95-100之间的</span><br><span class="line">SELECT Studentno,StudentResult</span><br><span class="line">FROM result</span><br><span class="line">WHERE StudentResult&gt;=95 AND StudentResult&lt;=100;</span><br><span class="line"></span><br><span class="line">-- AND也可以写成 &amp;&amp;</span><br><span class="line">SELECT Studentno,StudentResult</span><br><span class="line">FROM result</span><br><span class="line">WHERE StudentResult&gt;=95 &amp;&amp; StudentResult&lt;=100;</span><br><span class="line"></span><br><span class="line">-- 模糊查询(对应的词:精确查询)</span><br><span class="line">SELECT Studentno,StudentResult</span><br><span class="line">FROM result</span><br><span class="line">WHERE StudentResult BETWEEN 95 AND 100;</span><br><span class="line"></span><br><span class="line">-- 除了1000号同学,要其他同学的成绩</span><br><span class="line">SELECT studentno,studentresult</span><br><span class="line">FROM result</span><br><span class="line">WHERE studentno!=1000;</span><br><span class="line"></span><br><span class="line">-- 使用NOT</span><br><span class="line">SELECT studentno,studentresult</span><br><span class="line">FROM result</span><br><span class="line">WHERE NOT studentno=1000;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>模糊查询 ：比较操作符</p>
</blockquote>
<p><img src="/.io//gif;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVQImWNgYGBgAAAABQABh6FO1AAAAABJRU5ErkJggg==" alt="图片"></p>
<p>注意：</p>
<ul>
<li>数值数据类型的记录之间才能进行算术运算 ;</li>
<li>相同数据类型的数据之间才能进行比较 ;</li>
</ul>
<p>测试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 模糊查询 between and \ like \ in \ null</span><br><span class="line"></span><br><span class="line">-- =============================================</span><br><span class="line">-- LIKE</span><br><span class="line">-- =============================================</span><br><span class="line">-- 查询姓刘的同学的学号及姓名</span><br><span class="line">-- like结合使用的通配符 : % (代表0到任意个字符) _ (一个字符)</span><br><span class="line">SELECT studentno,studentname FROM student</span><br><span class="line">WHERE studentname LIKE &#x27;刘%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询姓刘的同学,后面只有一个字的</span><br><span class="line">SELECT studentno,studentname FROM student</span><br><span class="line">WHERE studentname LIKE &#x27;刘_&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询姓刘的同学,后面只有两个字的</span><br><span class="line">SELECT studentno,studentname FROM student</span><br><span class="line">WHERE studentname LIKE &#x27;刘__&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询姓名中含有 嘉 字的</span><br><span class="line">SELECT studentno,studentname FROM student</span><br><span class="line">WHERE studentname LIKE &#x27;%嘉%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询姓名中含有特殊字符的需要使用转义符号 &#x27;\&#x27;</span><br><span class="line">-- 自定义转义符关键字: ESCAPE &#x27;:&#x27;</span><br><span class="line"></span><br><span class="line">-- =============================================</span><br><span class="line">-- IN</span><br><span class="line">-- =============================================</span><br><span class="line">-- 查询学号为1000,1001,1002的学生姓名</span><br><span class="line">SELECT studentno,studentname FROM student</span><br><span class="line">WHERE studentno IN (1000,1001,1002);</span><br><span class="line"></span><br><span class="line">-- 查询地址在北京,南京,河南洛阳的学生</span><br><span class="line">SELECT studentno,studentname,address FROM student</span><br><span class="line">WHERE address IN (&#x27;北京&#x27;,&#x27;南京&#x27;,&#x27;河南洛阳&#x27;);</span><br><span class="line"></span><br><span class="line">-- =============================================</span><br><span class="line">-- NULL 空</span><br><span class="line">-- =============================================</span><br><span class="line">-- 查询出生日期没有填写的同学</span><br><span class="line">-- 不能直接写=NULL , 这是代表错误的 , 用 is null</span><br><span class="line">SELECT studentname FROM student</span><br><span class="line">WHERE BornDate IS NULL;</span><br><span class="line"></span><br><span class="line">-- 查询出生日期填写的同学</span><br><span class="line">SELECT studentname FROM student</span><br><span class="line">WHERE BornDate IS NOT NULL;</span><br><span class="line"></span><br><span class="line">-- 查询没有写家庭住址的同学(空字符串不等于null)</span><br><span class="line">SELECT studentname FROM student</span><br><span class="line">WHERE Address=&#x27;&#x27; OR Address IS NULL;</span><br></pre></td></tr></table></figure>



<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><blockquote>
<p>JOIN 对比</p>
</blockquote>
<p><img src="/.io//gif;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVQImWNgYGBgAAAABQABh6FO1AAAAABJRU5ErkJggg==" alt="图片"></p>
<p>七种Join：</p>
<p><img src="/.io//gif;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVQImWNgYGBgAAAABQABh6FO1AAAAABJRU5ErkJggg==" alt="图片"></p>
<p>测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">连接查询</span><br><span class="line">   如需要多张数据表的数据进行查询,则可通过连接运算符实现多个查询</span><br><span class="line">内连接 inner join</span><br><span class="line">   查询两个表中的结果集中的交集</span><br><span class="line">外连接 outer join</span><br><span class="line">   左外连接 left join</span><br><span class="line">       (以左表作为基准,右边表来一一匹配,匹配不上的,返回左表的记录,右表以NULL填充)</span><br><span class="line">   右外连接 right join</span><br><span class="line">       (以右表作为基准,左边表来一一匹配,匹配不上的,返回右表的记录,左表以NULL填充)</span><br><span class="line">       </span><br><span class="line">等值连接和非等值连接</span><br><span class="line"></span><br><span class="line">自连接</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">-- 查询参加了考试的同学信息(学号,学生姓名,科目编号,分数)</span><br><span class="line">SELECT * FROM student;</span><br><span class="line">SELECT * FROM result;</span><br><span class="line"></span><br><span class="line">/*思路:</span><br><span class="line">(1):分析需求,确定查询的列来源于两个类,student result,连接查询</span><br><span class="line">(2):确定使用哪种连接查询?(内连接)</span><br><span class="line">*/</span><br><span class="line">SELECT s.studentno,studentname,subjectno,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno = s.studentno</span><br><span class="line"></span><br><span class="line">-- 右连接(也可实现)</span><br><span class="line">SELECT s.studentno,studentname,subjectno,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">RIGHT JOIN result r</span><br><span class="line">ON r.studentno = s.studentno</span><br><span class="line"></span><br><span class="line">-- 等值连接</span><br><span class="line">SELECT s.studentno,studentname,subjectno,StudentResult</span><br><span class="line">FROM student s , result r</span><br><span class="line">WHERE r.studentno = s.studentno</span><br><span class="line"></span><br><span class="line">-- 左连接 (查询了所有同学,不考试的也会查出来)</span><br><span class="line">SELECT s.studentno,studentname,subjectno,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">LEFT JOIN result r</span><br><span class="line">ON r.studentno = s.studentno</span><br><span class="line"></span><br><span class="line">-- 查一下缺考的同学(左连接应用场景)</span><br><span class="line">SELECT s.studentno,studentname,subjectno,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">LEFT JOIN result r</span><br><span class="line">ON r.studentno = s.studentno</span><br><span class="line">WHERE StudentResult IS NULL</span><br><span class="line"></span><br><span class="line">-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno = s.studentno</span><br><span class="line">INNER JOIN `subject` sub</span><br><span class="line">ON sub.subjectno = r.subjectno</span><br></pre></td></tr></table></figure>



<blockquote>
<p>自连接</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">自连接</span><br><span class="line">   数据表与自身进行连接</span><br><span class="line"></span><br><span class="line">需求:从一个包含栏目ID , 栏目名称和父栏目ID的表中</span><br><span class="line">    查询父栏目名称和其他子栏目名称</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">-- 创建一个表</span><br><span class="line">CREATE TABLE `category` (</span><br><span class="line">`categoryid` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT &#x27;主题id&#x27;,</span><br><span class="line">`pid` INT(10) NOT NULL COMMENT &#x27;父id&#x27;,</span><br><span class="line">`categoryName` VARCHAR(50) NOT NULL COMMENT &#x27;主题名字&#x27;,</span><br><span class="line">PRIMARY KEY (`categoryid`)</span><br><span class="line">) ENGINE=INNODB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">-- 插入数据</span><br><span class="line">INSERT INTO `category` (`categoryid`, `pid`, `categoryName`)</span><br><span class="line">VALUES(&#x27;2&#x27;,&#x27;1&#x27;,&#x27;信息技术&#x27;),</span><br><span class="line">(&#x27;3&#x27;,&#x27;1&#x27;,&#x27;软件开发&#x27;),</span><br><span class="line">(&#x27;4&#x27;,&#x27;3&#x27;,&#x27;数据库&#x27;),</span><br><span class="line">(&#x27;5&#x27;,&#x27;1&#x27;,&#x27;美术设计&#x27;),</span><br><span class="line">(&#x27;6&#x27;,&#x27;3&#x27;,&#x27;web开发&#x27;),</span><br><span class="line">(&#x27;7&#x27;,&#x27;5&#x27;,&#x27;ps技术&#x27;),</span><br><span class="line">(&#x27;8&#x27;,&#x27;2&#x27;,&#x27;办公信息&#x27;);</span><br><span class="line"></span><br><span class="line">-- 编写SQL语句,将栏目的父子关系呈现出来 (父栏目名称,子栏目名称)</span><br><span class="line">-- 核心思想:把一张表看成两张一模一样的表,然后将这两张表连接查询(自连接)</span><br><span class="line">SELECT a.categoryName AS &#x27;父栏目&#x27;,b.categoryName AS &#x27;子栏目&#x27;</span><br><span class="line">FROM category AS a,category AS b</span><br><span class="line">WHERE a.`categoryid`=b.`pid`</span><br><span class="line"></span><br><span class="line">-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno = s.studentno</span><br><span class="line">INNER JOIN `subject` sub</span><br><span class="line">ON sub.subjectno = r.subjectno</span><br><span class="line"></span><br><span class="line">-- 查询学员及所属的年级(学号,学生姓名,年级名)</span><br><span class="line">SELECT studentno AS 学号,studentname AS 学生姓名,gradename AS 年级名称</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN grade g</span><br><span class="line">ON s.`GradeId` = g.`GradeID`</span><br><span class="line"></span><br><span class="line">-- 查询科目及所属的年级(科目名称,年级名称)</span><br><span class="line">SELECT subjectname AS 科目名称,gradename AS 年级名称</span><br><span class="line">FROM SUBJECT sub</span><br><span class="line">INNER JOIN grade g</span><br><span class="line">ON sub.gradeid = g.gradeid</span><br><span class="line"></span><br><span class="line">-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno = s.studentno</span><br><span class="line">INNER JOIN `subject` sub</span><br><span class="line">ON r.subjectno = sub.subjectno</span><br><span class="line">WHERE subjectname=&#x27;数据库结构-1&#x27;</span><br></pre></td></tr></table></figure>



<h3 id="排序和分页"><a href="#排序和分页" class="headerlink" title="排序和分页"></a>排序和分页</h3><p>测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*============== 排序 ================</span><br><span class="line">语法 : ORDER BY</span><br><span class="line">   ORDER BY 语句用于根据指定的列对结果集进行排序。</span><br><span class="line">   ORDER BY 语句默认按照ASC升序对记录进行排序。</span><br><span class="line">   如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。</span><br><span class="line">   </span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)</span><br><span class="line">-- 按成绩降序排序</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno = s.studentno</span><br><span class="line">INNER JOIN `subject` sub</span><br><span class="line">ON r.subjectno = sub.subjectno</span><br><span class="line">WHERE subjectname=&#x27;数据库结构-1&#x27;</span><br><span class="line">ORDER BY StudentResult DESC</span><br><span class="line"></span><br><span class="line">/*============== 分页 ================</span><br><span class="line">语法 : SELECT * FROM table LIMIT [offset,] rows | rows OFFSET offset</span><br><span class="line">好处 : (用户体验,网络传输,查询压力)</span><br><span class="line"></span><br><span class="line">推导:</span><br><span class="line">   第一页 : limit 0,5</span><br><span class="line">   第二页 : limit 5,5</span><br><span class="line">   第三页 : limit 10,5</span><br><span class="line">   ......</span><br><span class="line">   第N页 : limit (pageNo-1)*pageSzie,pageSzie</span><br><span class="line">   [pageNo:页码,pageSize:单页面显示条数]</span><br><span class="line">   </span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">-- 每页显示5条数据</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno = s.studentno</span><br><span class="line">INNER JOIN `subject` sub</span><br><span class="line">ON r.subjectno = sub.subjectno</span><br><span class="line">WHERE subjectname=&#x27;数据库结构-1&#x27;</span><br><span class="line">ORDER BY StudentResult DESC , studentno</span><br><span class="line">LIMIT 0,5</span><br><span class="line"></span><br><span class="line">-- 查询 JAVA第一学年 课程成绩前10名并且分数大于80的学生信息(学号,姓名,课程名,分数)</span><br><span class="line">SELECT s.studentno,studentname,subjectname,StudentResult</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON r.studentno = s.studentno</span><br><span class="line">INNER JOIN `subject` sub</span><br><span class="line">ON r.subjectno = sub.subjectno</span><br><span class="line">WHERE subjectname=&#x27;JAVA第一学年&#x27;</span><br><span class="line">ORDER BY StudentResult DESC</span><br><span class="line">LIMIT 0,10</span><br></pre></td></tr></table></figure>



<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*============== 子查询 ================</span><br><span class="line">什么是子查询?</span><br><span class="line">   在查询语句中的WHERE条件子句中,又嵌套了另一个查询语句</span><br><span class="line">   嵌套查询可由多个子查询组成,求解的方式是由里及外;</span><br><span class="line">   子查询返回的结果一般都是集合,故而建议使用IN关键字;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">-- 查询 数据库结构-1 的所有考试结果(学号,科目编号,成绩),并且成绩降序排列</span><br><span class="line">-- 方法一:使用连接查询</span><br><span class="line">SELECT studentno,r.subjectno,StudentResult</span><br><span class="line">FROM result r</span><br><span class="line">INNER JOIN `subject` sub</span><br><span class="line">ON r.`SubjectNo`=sub.`SubjectNo`</span><br><span class="line">WHERE subjectname = &#x27;数据库结构-1&#x27;</span><br><span class="line">ORDER BY studentresult DESC;</span><br><span class="line"></span><br><span class="line">-- 方法二:使用子查询(执行顺序:由里及外)</span><br><span class="line">SELECT studentno,subjectno,StudentResult</span><br><span class="line">FROM result</span><br><span class="line">WHERE subjectno=(</span><br><span class="line">   SELECT subjectno FROM `subject`</span><br><span class="line">   WHERE subjectname = &#x27;数据库结构-1&#x27;</span><br><span class="line">)</span><br><span class="line">ORDER BY studentresult DESC;</span><br><span class="line"></span><br><span class="line">-- 查询课程为 高等数学-2 且分数不小于80分的学生的学号和姓名</span><br><span class="line">-- 方法一:使用连接查询</span><br><span class="line">SELECT s.studentno,studentname</span><br><span class="line">FROM student s</span><br><span class="line">INNER JOIN result r</span><br><span class="line">ON s.`StudentNo` = r.`StudentNo`</span><br><span class="line">INNER JOIN `subject` sub</span><br><span class="line">ON sub.`SubjectNo` = r.`SubjectNo`</span><br><span class="line">WHERE subjectname = &#x27;高等数学-2&#x27; AND StudentResult&gt;=80</span><br><span class="line"></span><br><span class="line">-- 方法二:使用连接查询+子查询</span><br><span class="line">-- 分数不小于80分的学生的学号和姓名</span><br><span class="line">SELECT r.studentno,studentname FROM student s</span><br><span class="line">INNER JOIN result r ON s.`StudentNo`=r.`StudentNo`</span><br><span class="line">WHERE StudentResult&gt;=80</span><br><span class="line"></span><br><span class="line">-- 在上面SQL基础上,添加需求:课程为 高等数学-2</span><br><span class="line">SELECT r.studentno,studentname FROM student s</span><br><span class="line">INNER JOIN result r ON s.`StudentNo`=r.`StudentNo`</span><br><span class="line">WHERE StudentResult&gt;=80 AND subjectno=(</span><br><span class="line">   SELECT subjectno FROM `subject`</span><br><span class="line">   WHERE subjectname = &#x27;高等数学-2&#x27;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">-- 方法三:使用子查询</span><br><span class="line">-- 分步写简单sql语句,然后将其嵌套起来</span><br><span class="line">SELECT studentno,studentname FROM student WHERE studentno IN(</span><br><span class="line">   SELECT studentno FROM result WHERE StudentResult&gt;=80 AND subjectno=(</span><br><span class="line">       SELECT subjectno FROM `subject` WHERE subjectname = &#x27;高等数学-2&#x27;</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">练习题目:</span><br><span class="line">   查 C语言-1 的前5名学生的成绩信息(学号,姓名,分数)</span><br><span class="line">   使用子查询,查询郭靖同学所在的年级名称</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<h2 id="MySQL05：MySQL函数"><a href="#MySQL05：MySQL函数" class="headerlink" title="MySQL05：MySQL函数"></a>MySQL05：MySQL函数</h2><p><strong><font color="red">MySQL函数</font></strong></p>
<h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><p><strong>数据函数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT ABS(-8);  /*绝对值*/</span><br><span class="line">SELECT CEILING(9.4); /*向上取整*/</span><br><span class="line">SELECT FLOOR(9.4);   /*向下取整*/</span><br><span class="line">SELECT RAND();  /*随机数,返回一个0-1之间的随机数*/</span><br><span class="line">SELECT SIGN(0); /*符号函数: 负数返回-1,正数返回1,0返回0*/</span><br></pre></td></tr></table></figure>

<p><strong>字符串函数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT CHAR_LENGTH(&#x27;狂神说坚持就能成功&#x27;); /*返回字符串包含的字符数*/</span><br><span class="line">SELECT CONCAT(&#x27;我&#x27;,&#x27;爱&#x27;,&#x27;程序&#x27;);  /*合并字符串,参数可以有多个*/</span><br><span class="line">SELECT INSERT(&#x27;我爱编程helloworld&#x27;,1,2,&#x27;超级热爱&#x27;);  /*替换字符串,从某个位置开始替换某个长度*/</span><br><span class="line">SELECT LOWER(&#x27;KuangShen&#x27;); /*小写*/</span><br><span class="line">SELECT UPPER(&#x27;KuangShen&#x27;); /*大写*/</span><br><span class="line">SELECT LEFT(&#x27;hello,world&#x27;,5);   /*从左边截取*/</span><br><span class="line">SELECT RIGHT(&#x27;hello,world&#x27;,5);  /*从右边截取*/</span><br><span class="line">SELECT REPLACE(&#x27;狂神说坚持就能成功&#x27;,&#x27;坚持&#x27;,&#x27;努力&#x27;);  /*替换字符串*/</span><br><span class="line">SELECT SUBSTR(&#x27;狂神说坚持就能成功&#x27;,4,6); /*截取字符串,开始和长度*/</span><br><span class="line">SELECT REVERSE(&#x27;狂神说坚持就能成功&#x27;); /*反转</span><br><span class="line"></span><br><span class="line">-- 查询姓周的同学,改成邹</span><br><span class="line">SELECT REPLACE(studentname,&#x27;周&#x27;,&#x27;邹&#x27;) AS 新名字</span><br><span class="line">FROM student WHERE studentname LIKE &#x27;周%&#x27;;</span><br></pre></td></tr></table></figure>

<p><strong>日期和时间函数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT CURRENT_DATE();   /*获取当前日期*/</span><br><span class="line">SELECT CURDATE();   /*获取当前日期*/</span><br><span class="line">SELECT NOW();   /*获取当前日期和时间*/</span><br><span class="line">SELECT LOCALTIME();   /*获取当前日期和时间*/</span><br><span class="line">SELECT SYSDATE();   /*获取当前日期和时间*/</span><br><span class="line"></span><br><span class="line">-- 获取年月日,时分秒</span><br><span class="line">SELECT YEAR(NOW());</span><br><span class="line">SELECT MONTH(NOW());</span><br><span class="line">SELECT DAY(NOW());</span><br><span class="line">SELECT HOUR(NOW());</span><br><span class="line">SELECT MINUTE(NOW());</span><br><span class="line">SELECT SECOND(NOW());</span><br></pre></td></tr></table></figure>

<p><strong>系统信息函数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT VERSION();  /*版本*/</span><br><span class="line">SELECT USER();     /*用户*/</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><table>
<thead>
<tr>
<th>函数名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>COUNT()</td>
<td>返回满足Select条件的记录总和数，如 select count(*) 【不建议使用 *，效率低】</td>
</tr>
<tr>
<td>SUM()</td>
<td>返回数字字段或表达式列作统计，返回一列的总和。</td>
</tr>
<tr>
<td>AVG()</td>
<td>通常为数值字段或表达列作统计，返回一列的平均值</td>
</tr>
<tr>
<td>MAX()</td>
<td>可以为数值字段，字符字段或表达式列作统计，返回最大的值。</td>
</tr>
<tr>
<td>MIN()</td>
<td>可以为数值字段，字符字段或表达式列作统计，返回最小的值。</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 聚合函数</span><br><span class="line">/*COUNT:非空的*/</span><br><span class="line">SELECT COUNT(studentname) FROM student;</span><br><span class="line">SELECT COUNT(*) FROM student;</span><br><span class="line">SELECT COUNT(1) FROM student;  /*推荐*/</span><br><span class="line"></span><br><span class="line">-- 从含义上讲，count(1) 与 count(*) 都表示对全部数据行的查询。</span><br><span class="line">-- count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。</span><br><span class="line">-- count(*) 包括了所有的列，相当于行数，在统计结果的时候，包含字段为null 的记录；</span><br><span class="line">-- count(1) 用1代表代码行，在统计结果的时候，包含字段为null 的记录 。</span><br><span class="line">/*</span><br><span class="line">很多人认为count(1)执行的效率会比count(*)高，原因是count(*)会存在全表扫描，而count(1)可以针对一个字段进行查询。其实不然，count(1)和count(*)都会对全表进行扫描，统计所有记录的条数，包括那些为null的记录，因此，它们的效率可以说是相差无几。而count(字段)则与前两者不同，它会统计该字段不为null的记录条数。</span><br><span class="line"></span><br><span class="line">下面它们之间的一些对比：</span><br><span class="line"></span><br><span class="line">1）在表没有主键时，count(1)比count(*)快</span><br><span class="line">2）有主键时，主键作为计算条件，count(主键)效率最高；</span><br><span class="line">3）若表格只有一个字段，则count(*)效率较高。</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">SELECT SUM(StudentResult) AS 总和 FROM result;</span><br><span class="line">SELECT AVG(StudentResult) AS 平均分 FROM result;</span><br><span class="line">SELECT MAX(StudentResult) AS 最高分 FROM result;</span><br><span class="line">SELECT MIN(StudentResult) AS 最低分 FROM result;</span><br></pre></td></tr></table></figure>

<p><strong>题目：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查询不同课程的平均分,最高分,最低分</span><br><span class="line">-- 前提:根据不同的课程进行分组</span><br><span class="line"></span><br><span class="line">SELECT subjectname,AVG(studentresult) AS 平均分,MAX(StudentResult) AS 最高分,MIN(StudentResult) AS 最低分</span><br><span class="line">FROM result AS r</span><br><span class="line">INNER JOIN `subject` AS s</span><br><span class="line">ON r.subjectno = s.subjectno</span><br><span class="line">GROUP BY r.subjectno</span><br><span class="line">HAVING 平均分&gt;80;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">where写在group by前面.</span><br><span class="line">要是放在分组后面的筛选</span><br><span class="line">要使用HAVING..</span><br><span class="line">因为having是从前面筛选的字段再筛选，而where是从数据表中的&gt;字段直接进行的筛选的</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MD5 加密</p>
</blockquote>
<p><strong>一、MD5简介</strong></p>
<p>MD5即Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5的前身有MD2、MD3和MD4。</p>
<p><strong>二、实现数据加密</strong></p>
<p>新建一个表 testmd5</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `testmd5` (</span><br><span class="line"> `id` INT(4) NOT NULL,</span><br><span class="line"> `name` VARCHAR(20) NOT NULL,</span><br><span class="line"> `pwd` VARCHAR(50) NOT NULL,</span><br><span class="line"> PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=INNODB DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure>

<p>插入一些数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO testmd5 VALUES(1,&#x27;kuangshen&#x27;,&#x27;123456&#x27;),(2,&#x27;qinjiang&#x27;,&#x27;456789&#x27;)</span><br></pre></td></tr></table></figure>

<p>如果我们要对pwd这一列数据进行加密，语法是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update testmd5 set pwd = md5(pwd);</span><br></pre></td></tr></table></figure>

<p>如果单独对某个用户(如kuangshen)的密码加密：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO testmd5 VALUES(3,&#x27;kuangshen2&#x27;,&#x27;123456&#x27;)</span><br><span class="line">update testmd5 set pwd = md5(pwd) where name = &#x27;kuangshen2&#x27;;</span><br></pre></td></tr></table></figure>

<p>插入新的数据自动加密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO testmd5 VALUES(4,&#x27;kuangshen3&#x27;,md5(&#x27;123456&#x27;));</span><br></pre></td></tr></table></figure>

<p>查询登录用户信息（md5对比使用，查看用户输入加密后的密码进行比对）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM testmd5 WHERE `name`=&#x27;kuangshen&#x27; AND pwd=MD5(&#x27;123456&#x27;);</span><br></pre></td></tr></table></figure>



<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- ================ 内置函数 ================</span><br><span class="line">-- 数值函数</span><br><span class="line">abs(x)            -- 绝对值 abs(-10.9) = 10</span><br><span class="line">format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46</span><br><span class="line">ceil(x)            -- 向上取整 ceil(10.1) = 11</span><br><span class="line">floor(x)        -- 向下取整 floor (10.1) = 10</span><br><span class="line">round(x)        -- 四舍五入去整</span><br><span class="line">mod(m, n)        -- m%n m mod n 求余 10%3=1</span><br><span class="line">pi()            -- 获得圆周率</span><br><span class="line">pow(m, n)        -- m^n</span><br><span class="line">sqrt(x)            -- 算术平方根</span><br><span class="line">rand()            -- 随机数</span><br><span class="line">truncate(x, d)    -- 截取d位小数</span><br><span class="line"></span><br><span class="line">-- 时间日期函数</span><br><span class="line">now(), current_timestamp();     -- 当前日期时间</span><br><span class="line">current_date();                    -- 当前日期</span><br><span class="line">current_time();                    -- 当前时间</span><br><span class="line">date(&#x27;yyyy-mm-dd hh:ii:ss&#x27;);    -- 获取日期部分</span><br><span class="line">time(&#x27;yyyy-mm-dd hh:ii:ss&#x27;);    -- 获取时间部分</span><br><span class="line">date_format(&#x27;yyyy-mm-dd hh:ii:ss&#x27;, &#x27;%d %y %a %d %m %b %j&#x27;);    -- 格式化时间</span><br><span class="line">unix_timestamp();                -- 获得unix时间戳</span><br><span class="line">from_unixtime();                -- 从时间戳获得时间</span><br><span class="line"></span><br><span class="line">-- 字符串函数</span><br><span class="line">length(string)            -- string长度，字节</span><br><span class="line">char_length(string)        -- string的字符个数</span><br><span class="line">substring(str, position [,length])        -- 从str的position开始,取length个字符</span><br><span class="line">replace(str ,search_str ,replace_str)    -- 在str中用replace_str替换search_str</span><br><span class="line">instr(string ,substring)    -- 返回substring首次在string中出现的位置</span><br><span class="line">concat(string [,...])    -- 连接字串</span><br><span class="line">charset(str)            -- 返回字串字符集</span><br><span class="line">lcase(string)            -- 转换成小写</span><br><span class="line">left(string, length)    -- 从string2中的左边起取length个字符</span><br><span class="line">load_file(file_name)    -- 从文件读取内容</span><br><span class="line">locate(substring, string [,start_position])    -- 同instr,但可指定开始位置</span><br><span class="line">lpad(string, length, pad)    -- 重复用pad加在string开头,直到字串长度为length</span><br><span class="line">ltrim(string)            -- 去除前端空格</span><br><span class="line">repeat(string, count)    -- 重复count次</span><br><span class="line">rpad(string, length, pad)    --在str后用pad补充,直到长度为length</span><br><span class="line">rtrim(string)            -- 去除后端空格</span><br><span class="line">strcmp(string1 ,string2)    -- 逐字符比较两字串大小</span><br><span class="line"></span><br><span class="line">-- 聚合函数</span><br><span class="line">count()</span><br><span class="line">sum();</span><br><span class="line">max();</span><br><span class="line">min();</span><br><span class="line">avg();</span><br><span class="line">group_concat()</span><br><span class="line"></span><br><span class="line">-- 其他常用函数</span><br><span class="line">md5();</span><br><span class="line">default();</span><br></pre></td></tr></table></figure>

<h2 id="MySQL06：事务和索引"><a href="#MySQL06：事务和索引" class="headerlink" title="MySQL06：事务和索引"></a>MySQL06：事务和索引</h2><p><font color="red"><strong>事务和索引</strong></font></p>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote>
<p>什么是事务</p>
</blockquote>
<ul>
<li>事务就是将一组SQL语句放在同一批次内去执行</li>
<li>如果一个SQL语句出错,则该批次内的所有SQL都将被取消执行</li>
<li>MySQL事务处理只支持InnoDB和BDB数据表类型</li>
</ul>
<blockquote>
<p>事务的ACID原则  百度 ACID</p>
</blockquote>
<p><strong>原子性(Atomic)</strong></p>
<ul>
<li>整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（ROLLBACK）到事务开始前的状态，就像这个事务从来没有执行过一样。</li>
</ul>
<p><strong>一致性(Consist)</strong></p>
<ul>
<li>一个事务可以封装状态改变（除非它是一个只读的）。事务必须始终保持系统处于一致的状态，不管在任何给定的时间并发事务有多少。也就是说：如果事务是并发多个，系统也必须如同串行事务一样操作。其主要特征是保护性和不变性(Preserving an Invariant)，以转账案例为例，假设有五个账户，每个账户余额是100元，那么五个账户总额是500元，如果在这个5个账户之间同时发生多个转账，无论并发多少个，比如在A与B账户之间转账5元，在C与D账户之间转账10元，在B与E之间转账15元，五个账户总额也应该还是500元，这就是保护性和不变性。</li>
</ul>
<p><strong>隔离性(Isolated)</strong></p>
<ul>
<li>隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请求，使得在同一时间仅有一个请求用于同一数据。</li>
</ul>
<p><strong>持久性(Durable)</strong></p>
<ul>
<li>在事务完成以后，该事务对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。</li>
</ul>
<blockquote>
<p><strong>基本语法</strong></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 使用set语句来改变自动提交模式</span><br><span class="line">SET autocommit = 0;   /*关闭*/</span><br><span class="line">SET autocommit = 1;   /*开启*/</span><br><span class="line"></span><br><span class="line">-- 注意:</span><br><span class="line">--- 1.MySQL中默认是自动提交</span><br><span class="line">--- 2.使用事务时应先关闭自动提交</span><br><span class="line"></span><br><span class="line">-- 开始一个事务,标记事务的起始点</span><br><span class="line">START TRANSACTION  </span><br><span class="line"></span><br><span class="line">-- 提交一个事务给数据库</span><br><span class="line">COMMIT</span><br><span class="line"></span><br><span class="line">-- 将事务回滚,数据回到本次事务的初始状态</span><br><span class="line">ROLLBACK</span><br><span class="line"></span><br><span class="line">-- 还原MySQL数据库的自动提交</span><br><span class="line">SET autocommit =1;</span><br><span class="line"></span><br><span class="line">-- 保存点</span><br><span class="line">SAVEPOINT 保存点名称 -- 设置一个事务保存点</span><br><span class="line">ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点</span><br><span class="line">RELEASE SAVEPOINT 保存点名称 -- 删除保存点</span><br></pre></td></tr></table></figure>



<blockquote>
<p>测试</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">课堂测试题目</span><br><span class="line"></span><br><span class="line">A在线买一款价格为500元商品,网上银行转账.</span><br><span class="line">A的银行卡余额为2000,然后给商家B支付500.</span><br><span class="line">商家B一开始的银行卡余额为10000</span><br><span class="line"></span><br><span class="line">创建数据库shop和创建表account并插入2条数据</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">CREATE DATABASE `shop`CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br><span class="line">USE `shop`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `account` (</span><br><span class="line">`id` INT(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">`name` VARCHAR(32) NOT NULL,</span><br><span class="line">`cash` DECIMAL(9,2) NOT NULL,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=INNODB DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">INSERT INTO account (`name`,`cash`)</span><br><span class="line">VALUES(&#x27;A&#x27;,2000.00),(&#x27;B&#x27;,10000.00)</span><br><span class="line"></span><br><span class="line">-- 转账实现</span><br><span class="line">SET autocommit = 0; -- 关闭自动提交</span><br><span class="line">START TRANSACTION;  -- 开始一个事务,标记事务的起始点</span><br><span class="line">UPDATE account SET cash=cash-500 WHERE `name`=&#x27;A&#x27;;</span><br><span class="line">UPDATE account SET cash=cash+500 WHERE `name`=&#x27;B&#x27;;</span><br><span class="line">COMMIT; -- 提交事务</span><br><span class="line"># rollback;</span><br><span class="line">SET autocommit = 1; -- 恢复自动提交</span><br></pre></td></tr></table></figure>



<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><blockquote>
<p>索引的作用</p>
</blockquote>
<ul>
<li>提高查询速度</li>
<li>确保数据的唯一性</li>
<li>可以加速表和表之间的连接 , 实现表与表之间的参照完整性</li>
<li>使用分组和排序子句进行数据检索时 , 可以显著减少分组和排序的时间</li>
<li>全文检索字段进行搜索优化.</li>
</ul>
<blockquote>
<p>分类</p>
</blockquote>
<ul>
<li>主键索引 (Primary Key)</li>
<li>唯一索引 (Unique)</li>
<li>常规索引 (Index)</li>
<li>全文索引 (FullText)</li>
</ul>
<blockquote>
<p>主键索引</p>
</blockquote>
<p>主键 : 某一个属性组能唯一标识一条记录</p>
<p>特点 :</p>
<ul>
<li>最常见的索引类型</li>
<li>确保数据记录的唯一性</li>
<li>确定特定数据记录在数据库中的位置</li>
</ul>
<blockquote>
<p>唯一索引</p>
</blockquote>
<p>作用 : 避免同一个表中某数据列中的值重复</p>
<p>与主键索引的区别</p>
<ul>
<li>主键索引只能有一个</li>
<li>唯一索引可能有多个</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `Grade`(</span><br><span class="line">  `GradeID` INT(11) AUTO_INCREMENT PRIMARYKEY,</span><br><span class="line">  `GradeName` VARCHAR(32) NOT NULL UNIQUE</span><br><span class="line">   -- 或 UNIQUE KEY `GradeID` (`GradeID`)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>常规索引</p>
</blockquote>
<p>作用 : 快速定位特定数据</p>
<p>注意 :</p>
<ul>
<li>index 和 key 关键字都可以设置常规索引</li>
<li>应加在查询找条件的字段</li>
<li>不宜添加太多常规索引,影响数据的插入,删除和修改操作</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `result`(</span><br><span class="line">   -- 省略一些代码</span><br><span class="line">  INDEX/KEY `ind` (`studentNo`,`subjectNo`) -- 创建表时添加</span><br><span class="line">)</span><br><span class="line">-- 创建后添加</span><br><span class="line">ALTER TABLE `result` ADD INDEX `ind`(`studentNo`,`subjectNo`);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>全文索引</p>
</blockquote>
<p>百度搜索：全文索引</p>
<p>作用 : 快速定位特定数据</p>
<p>注意 :</p>
<ul>
<li>只能用于MyISAM类型的数据表</li>
<li>只能用于CHAR , VARCHAR , TEXT数据列类型</li>
<li>适合大型数据集</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">#方法一：创建表时</span><br><span class="line">  　　CREATE TABLE 表名 (</span><br><span class="line">               字段名1 数据类型 [完整性约束条件…],</span><br><span class="line">               字段名2 数据类型 [完整性约束条件…],</span><br><span class="line">               [UNIQUE | FULLTEXT | SPATIAL ]   INDEX | KEY</span><br><span class="line">               [索引名] (字段名[(长度)] [ASC |DESC])</span><br><span class="line">               );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#方法二：CREATE在已存在的表上创建索引</span><br><span class="line">       CREATE [UNIQUE | FULLTEXT | SPATIAL ] INDEX 索引名</span><br><span class="line">                    ON 表名 (字段名[(长度)] [ASC |DESC]) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#方法三：ALTER TABLE在已存在的表上创建索引</span><br><span class="line">       ALTER TABLE 表名 ADD [UNIQUE | FULLTEXT | SPATIAL ] INDEX</span><br><span class="line">                            索引名 (字段名[(长度)] [ASC |DESC]) ;</span><br><span class="line">                           </span><br><span class="line">                           </span><br><span class="line">#删除索引：DROP INDEX 索引名 ON 表名字;</span><br><span class="line">#删除主键索引: ALTER TABLE 表名 DROP PRIMARY KEY;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#显示索引信息: SHOW INDEX FROM student;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/*增加全文索引*/</span><br><span class="line">ALTER TABLE `school`.`student` ADD FULLTEXT INDEX `studentname` (`StudentName`);</span><br><span class="line"></span><br><span class="line">/*EXPLAIN : 分析SQL语句执行性能*/</span><br><span class="line">EXPLAIN SELECT * FROM student WHERE studentno=&#x27;1000&#x27;;</span><br><span class="line"></span><br><span class="line">/*使用全文索引*/</span><br><span class="line">-- 全文搜索通过 MATCH() 函数完成。</span><br><span class="line">-- 搜索字符串作为 against() 的参数被给定。搜索以忽略字母大小写的方式执行。对于表中的每个记录行，MATCH() 返回一个相关性值。即，在搜索字符串与记录行在 MATCH() 列表中指定的列的文本之间的相似性尺度。</span><br><span class="line">EXPLAIN SELECT *FROM student WHERE MATCH(studentname) AGAINST(&#x27;love&#x27;);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">开始之前，先说一下全文索引的版本、存储引擎、数据类型的支持情况</span><br><span class="line"></span><br><span class="line">MySQL 5.6 以前的版本，只有 MyISAM 存储引擎支持全文索引；</span><br><span class="line">MySQL 5.6 及以后的版本，MyISAM 和 InnoDB 存储引擎均支持全文索引;</span><br><span class="line">只有字段的数据类型为 char、varchar、text 及其系列才可以建全文索引。</span><br><span class="line">测试或使用全文索引时，要先看一下自己的 MySQL 版本、存储引擎和数据类型是否支持全文索引。</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<blockquote>
<p>拓展：测试索引</p>
</blockquote>
<p><strong>建表app_user：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `app_user` (</span><br><span class="line">`id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">`name` varchar(50) DEFAULT &#x27;&#x27; COMMENT &#x27;用户昵称&#x27;,</span><br><span class="line">`email` varchar(50) NOT NULL COMMENT &#x27;用户邮箱&#x27;,</span><br><span class="line">`phone` varchar(20) DEFAULT &#x27;&#x27; COMMENT &#x27;手机号&#x27;,</span><br><span class="line">`gender` tinyint(4) unsigned DEFAULT &#x27;0&#x27; COMMENT &#x27;性别（0:男；1：女）&#x27;,</span><br><span class="line">`password` varchar(100) NOT NULL COMMENT &#x27;密码&#x27;,</span><br><span class="line">`age` tinyint(4) DEFAULT &#x27;0&#x27; COMMENT &#x27;年龄&#x27;,</span><br><span class="line">`create_time` datetime DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">`update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATECURRENT_TIMESTAMP,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;app用户表&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>批量插入数据：100w</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP FUNCTION IF EXISTS mock_data;</span><br><span class="line">DELIMITER $$</span><br><span class="line">CREATE FUNCTION mock_data()</span><br><span class="line">RETURNS INT</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE num INT DEFAULT 1000000;</span><br><span class="line">DECLARE i INT DEFAULT 0;</span><br><span class="line">WHILE i &lt; num DO</span><br><span class="line">  INSERT INTO app_user(`name`, `email`, `phone`, `gender`, `password`, `age`)</span><br><span class="line">   VALUES(CONCAT(&#x27;用户&#x27;, i), &#x27;24736743@qq.com&#x27;, CONCAT(&#x27;18&#x27;, FLOOR(RAND()*(999999999-100000000)+100000000)),FLOOR(RAND()*2),UUID(), FLOOR(RAND()*100));</span><br><span class="line">  SET i = i + 1;</span><br><span class="line">END WHILE;</span><br><span class="line">RETURN i;</span><br><span class="line">END;</span><br><span class="line">SELECT mock_data();</span><br></pre></td></tr></table></figure>

<p><strong>索引效率测试</strong></p>
<p>无索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM app_user WHERE name = &#x27;用户9999&#x27;; -- 查看耗时</span><br><span class="line">SELECT * FROM app_user WHERE name = &#x27;用户9999&#x27;;</span><br><span class="line">SELECT * FROM app_user WHERE name = &#x27;用户9999&#x27;;</span><br><span class="line"></span><br><span class="line">mysql&gt; EXPLAIN SELECT * FROM app_user WHERE name = &#x27;用户9999&#x27;\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">          id: 1</span><br><span class="line">select_type: SIMPLE</span><br><span class="line">       table: app_user</span><br><span class="line">  partitions: NULL</span><br><span class="line">        type: ALL</span><br><span class="line">possible_keys: NULL</span><br><span class="line">        key: NULL</span><br><span class="line">    key_len: NULL</span><br><span class="line">        ref: NULL</span><br><span class="line">        rows: 992759</span><br><span class="line">    filtered: 10.00</span><br><span class="line">      Extra: Using where</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>创建索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE INDEX idx_app_user_name ON app_user(name);</span><br></pre></td></tr></table></figure>

<p>测试普通索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; EXPLAIN SELECT * FROM app_user WHERE name = &#x27;用户9999&#x27;\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">          id: 1</span><br><span class="line">select_type: SIMPLE</span><br><span class="line">       table: app_user</span><br><span class="line">  partitions: NULL</span><br><span class="line">        type: ref</span><br><span class="line">possible_keys: idx_app_user_name</span><br><span class="line">        key: idx_app_user_name</span><br><span class="line">    key_len: 203</span><br><span class="line">        ref: const</span><br><span class="line">        rows: 1</span><br><span class="line">    filtered: 100.00</span><br><span class="line">      Extra: NULL</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM app_user WHERE name = &#x27;用户9999&#x27;;</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM app_user WHERE name = &#x27;用户9999&#x27;;</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM app_user WHERE name = &#x27;用户9999&#x27;;</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>索引准则</p>
</blockquote>
<ul>
<li>索引不是越多越好</li>
<li>不要对经常变动的数据加索引</li>
<li>小数据量的表建议不要加索引</li>
<li>索引一般应加在查找条件的字段</li>
</ul>
<blockquote>
<p>索引的数据结构</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 我们可以在创建上述索引的时候，为其指定索引类型，分两类</span><br><span class="line">hash类型的索引：查询单条快，范围查询慢</span><br><span class="line">btree类型的索引：b+树，层数越多，数据量指数级增长（我们就用它，因为innodb默认支持它）</span><br><span class="line"></span><br><span class="line">-- 不同的存储引擎支持的索引类型也不一样</span><br><span class="line">InnoDB 支持事务，支持行级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</span><br><span class="line">MyISAM 不支持事务，支持表级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</span><br><span class="line">Memory 不支持事务，支持表级别锁定，支持 B-tree、Hash 等索引，不支持 Full-text 索引；</span><br><span class="line">NDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B-tree、Full-text 等索引；</span><br><span class="line">Archive 不支持事务，支持表级别锁定，不支持 B-tree、Hash、Full-text 等索引；</span><br></pre></td></tr></table></figure>

<h2 id="MySQL07：权限及如何设计数据库"><a href="#MySQL07：权限及如何设计数据库" class="headerlink" title="MySQL07：权限及如何设计数据库"></a>MySQL07：权限及如何设计数据库</h2><p><font color="red"><strong>权限及设计数据库</strong></font></p>
<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><blockquote>
<p>使用SQLyog 创建用户，并授予权限演示</p>
</blockquote>
<p><img src="https://gitee.com/xiebiao99/images/raw/master/img/20210725215718.png"></p>
<blockquote>
<p>基本命令</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 用户和权限管理 */ ------------------</span><br><span class="line">用户信息表：mysql.user</span><br><span class="line"></span><br><span class="line">-- 刷新权限</span><br><span class="line">FLUSH PRIVILEGES</span><br><span class="line"></span><br><span class="line">-- 增加用户 CREATE USER kuangshen IDENTIFIED BY &#x27;123456&#x27;</span><br><span class="line">CREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串)</span><br><span class="line">  - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。</span><br><span class="line">  - 只能创建用户，不能赋予权限。</span><br><span class="line">  - 用户名，注意引号：如 &#x27;user_name&#x27;@&#x27;192.168.1.1&#x27;</span><br><span class="line">  - 密码也需引号，纯数字密码也要加引号</span><br><span class="line">  - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD</span><br><span class="line"></span><br><span class="line">-- 重命名用户 RENAME USER kuangshen TO kuangshen2</span><br><span class="line">RENAME USER old_user TO new_user</span><br><span class="line"></span><br><span class="line">-- 设置密码</span><br><span class="line">SET PASSWORD = PASSWORD(&#x27;密码&#x27;)    -- 为当前用户设置密码</span><br><span class="line">SET PASSWORD FOR 用户名 = PASSWORD(&#x27;密码&#x27;)    -- 为指定用户设置密码</span><br><span class="line"></span><br><span class="line">-- 删除用户 DROP USER kuangshen2</span><br><span class="line">DROP USER 用户名</span><br><span class="line"></span><br><span class="line">-- 分配权限/添加用户</span><br><span class="line">GRANT 权限列表 ON 表名 TO 用户名 [IDENTIFIED BY [PASSWORD] &#x27;password&#x27;]</span><br><span class="line">  - all privileges 表示所有权限</span><br><span class="line">  - *.* 表示所有库的所有表</span><br><span class="line">  - 库名.表名 表示某库下面的某表</span><br><span class="line"></span><br><span class="line">-- 查看权限   SHOW GRANTS FOR root@localhost;</span><br><span class="line">SHOW GRANTS FOR 用户名</span><br><span class="line">   -- 查看当前用户权限</span><br><span class="line">  SHOW GRANTS; 或 SHOW GRANTS FOR CURRENT_USER; 或 SHOW GRANTS FOR CURRENT_USER();</span><br><span class="line"></span><br><span class="line">-- 撤消权限</span><br><span class="line">REVOKE 权限列表 ON 表名 FROM 用户名</span><br><span class="line">REVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名    -- 撤销所有权限</span><br></pre></td></tr></table></figure>

<blockquote>
<p>权限解释</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 权限列表</span><br><span class="line">ALL [PRIVILEGES]    -- 设置除GRANT OPTION之外的所有简单权限</span><br><span class="line">ALTER    -- 允许使用ALTER TABLE</span><br><span class="line">ALTER ROUTINE    -- 更改或取消已存储的子程序</span><br><span class="line">CREATE    -- 允许使用CREATE TABLE</span><br><span class="line">CREATE ROUTINE    -- 创建已存储的子程序</span><br><span class="line">CREATE TEMPORARY TABLES        -- 允许使用CREATE TEMPORARY TABLE</span><br><span class="line">CREATE USER        -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。</span><br><span class="line">CREATE VIEW        -- 允许使用CREATE VIEW</span><br><span class="line">DELETE    -- 允许使用DELETE</span><br><span class="line">DROP    -- 允许使用DROP TABLE</span><br><span class="line">EXECUTE        -- 允许用户运行已存储的子程序</span><br><span class="line">FILE    -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE</span><br><span class="line">INDEX     -- 允许使用CREATE INDEX和DROP INDEX</span><br><span class="line">INSERT    -- 允许使用INSERT</span><br><span class="line">LOCK TABLES        -- 允许对您拥有SELECT权限的表使用LOCK TABLES</span><br><span class="line">PROCESS     -- 允许使用SHOW FULL PROCESSLIST</span><br><span class="line">REFERENCES    -- 未被实施</span><br><span class="line">RELOAD    -- 允许使用FLUSH</span><br><span class="line">REPLICATION CLIENT    -- 允许用户询问从属服务器或主服务器的地址</span><br><span class="line">REPLICATION SLAVE    -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）</span><br><span class="line">SELECT    -- 允许使用SELECT</span><br><span class="line">SHOW DATABASES    -- 显示所有数据库</span><br><span class="line">SHOW VIEW    -- 允许使用SHOW CREATE VIEW</span><br><span class="line">SHUTDOWN    -- 允许使用mysqladmin shutdown</span><br><span class="line">SUPER    -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。</span><br><span class="line">UPDATE    -- 允许使用UPDATE</span><br><span class="line">USAGE    -- “无权限”的同义词</span><br><span class="line">GRANT OPTION    -- 允许授予权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 表维护 */</span><br><span class="line"></span><br><span class="line">-- 分析和存储表的关键字分布</span><br><span class="line">ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...</span><br><span class="line">-- 检查一个或多个表是否有错误</span><br><span class="line">CHECK TABLE tbl_name [, tbl_name] ... [option] ...</span><br><span class="line">option = &#123;QUICK | FAST | MEDIUM | EXTENDED | CHANGED&#125;</span><br><span class="line">-- 整理数据文件的碎片</span><br><span class="line">OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span><br></pre></td></tr></table></figure>



<h3 id="MySQL备份"><a href="#MySQL备份" class="headerlink" title="MySQL备份"></a>MySQL备份</h3><p>数据库备份必要性</p>
<ul>
<li>保证重要数据不丢失</li>
<li>数据转移</li>
</ul>
<p>MySQL数据库备份方法</p>
<ul>
<li>mysqldump备份工具</li>
<li>数据库管理工具,如SQLyog</li>
<li>直接拷贝数据库文件和相关配置文件</li>
</ul>
<p><strong>mysqldump客户端</strong></p>
<p>作用 :</p>
<ul>
<li>转储数据库</li>
<li>搜集数据库进行备份</li>
<li>将数据转移到另一个SQL服务器,不一定是MySQL服务器</li>
</ul>
<p><img src="/.io//gif;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVQImWNgYGBgAAAABQABh6FO1AAAAABJRU5ErkJggg==" alt="图片"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 导出</span><br><span class="line">1. 导出一张表 -- mysqldump -uroot -p123456 school student &gt;D:/a.sql</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)</span><br><span class="line">2. 导出多张表 -- mysqldump -uroot -p123456 school student result &gt;D:/a.sql</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:/a.sql)</span><br><span class="line">3. 导出所有表 -- mysqldump -uroot -p123456 school &gt;D:/a.sql</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.sql)</span><br><span class="line">4. 导出一个库 -- mysqldump -uroot -p123456 -B school &gt;D:/a.sql</span><br><span class="line">　　mysqldump -u用户名 -p密码 -B 库名 &gt; 文件名(D:/a.sql)</span><br><span class="line"></span><br><span class="line">可以-w携带备份条件</span><br><span class="line"></span><br><span class="line">-- 导入</span><br><span class="line">1. 在登录mysql的情况下：-- source D:/a.sql</span><br><span class="line">　　source 备份文件</span><br><span class="line">2. 在不登录的情况下</span><br><span class="line">　　mysql -u用户名 -p密码 库名 &lt; 备份文件</span><br></pre></td></tr></table></figure>



<h2 id="规范化数据库设计"><a href="#规范化数据库设计" class="headerlink" title="规范化数据库设计"></a>规范化数据库设计</h2><h3 id="为什么需要数据库设计"><a href="#为什么需要数据库设计" class="headerlink" title="为什么需要数据库设计"></a>为什么需要数据库设计</h3><p><strong>当数据库比较复杂时我们需要设计数据库</strong></p>
<p><strong>糟糕的数据库设计 :</strong> </p>
<ul>
<li>数据冗余,存储空间浪费</li>
<li>数据更新和插入的异常</li>
<li>程序性能差</li>
</ul>
<p><strong>良好的数据库设计 :</strong> </p>
<ul>
<li>节省数据的存储空间</li>
<li>能够保证数据的完整性</li>
<li>方便进行数据库应用系统的开发</li>
</ul>
<p> <strong>软件项目开发周期中数据库设计 :</strong></p>
<ul>
<li>需求分析阶段: 分析客户的业务和数据处理需求</li>
<li>概要设计阶段:设计数据库的E-R模型图 , 确认需求信息的正确和完整.</li>
</ul>
<p><strong>设计数据库步骤</strong></p>
<ul>
<li><p>收集信息</p>
</li>
<li><ul>
<li>与该系统有关人员进行交流 , 座谈 , 充分了解用户需求 , 理解数据库需要完成的任务.</li>
</ul>
</li>
<li><p>标识实体[Entity]</p>
</li>
<li></li>
<li><ul>
<li>标识数据库要管理的关键对象或实体,实体一般是名词</li>
</ul>
</li>
<li><p>标识每个实体需要存储的详细信息[Attribute]</p>
</li>
<li><p>标识实体之间的关系[Relationship]</p>
</li>
</ul>
<h3 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h3><p><strong>问题 : 为什么需要数据规范化?</strong></p>
<p>不合规范的表设计会导致的问题：</p>
<ul>
<li><p>信息重复</p>
</li>
<li><p>更新异常</p>
</li>
<li><p>插入异常</p>
</li>
<li><ul>
<li>无法正确表示信息</li>
</ul>
</li>
<li><p>删除异常</p>
</li>
<li><ul>
<li>丢失有效信息</li>
</ul>
</li>
</ul>
<blockquote>
<p>三大范式</p>
</blockquote>
<p><strong>第一范式 (1st NF)</strong></p>
<p>第一范式的目标是确保每列的原子性,如果每列都是不可再分的最小数据单元,则满足第一范式</p>
<p><strong>第二范式(2nd NF)</strong></p>
<p>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。</p>
<p>第二范式要求每个表只描述一件事情</p>
<p><strong>第三范式(3rd NF)</strong></p>
<p>如果一个关系满足第二范式,并且除了主键以外的其他列都不传递依赖于主键列,则满足第三范式.</p>
<p>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</p>
<p><strong>规范化和性能的关系</strong></p>
<p>为满足某种商业目标 , 数据库性能比规范化数据库更重要</p>
<p>在数据规范化的同时 , 要综合考虑数据库的性能</p>
<p>通过在给定的表中添加额外的字段,以大量减少需要从中搜索信息所需的时间</p>
<p>通过在给定的表中插入计算列,以方便查询</p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
